// Generated by CoffeeScript 1.4.0
/*Copyright (c) 2012 hoo89 (hoo89@me.com) Licensed MIT
*/


function generateCombinations(array, r, callback) {
    function equal(a, b) {
        for (var i = 0; i < a.length; i++) {
            if (a[i] != b[i]) return false;
        }
        return true;
    }
    function values(i, a) {
        var ret = [];
        for (var j = 0; j < i.length; j++) ret.push(a[i[j]]);
        return ret;
    }
    var n = array.length;
    var indices = [];
    for (var i = 0; i < r; i++) indices.push(i);
    var final = [];
    for (var i = n - r; i < n; i++) final.push(i);
    while (!equal(indices, final)) {
        callback(values(indices, array));
        var i = r - 1;
        while (indices[i] == n - r + i) i -= 1;
        indices[i] += 1;
        for (var j = i + 1; j < r; j++) indices[j] = indices[i] + j - i;
    }
    callback(values(indices, array));
}
/*
var a=["aaa","bbb","ccc","ddd"];
generateCombinations(a,2,function(elem){
    for(var i=0;i<elem.length;i++){
      console.log(elem[i]);
    }
    console.log("|");
  }
)*/
Array.prototype.shuffle = function() {
    var i = this.length;
    while(i){
        var j = Math.floor(Math.random()*i);
        var t = this[--i];
        this[i] = this[j];
        this[j] = t;
    }
    return this;
};
Array.prototype.uniq = function(){
    var o = new Object;
    var result = new Array;
    for(var i = 0, l = this.length; i < l; i++){
        var e = this[i];
        if(!(e in o) || o[e].indexOf(typeof this[i]) == -1){
            o[e] += typeof e;
            result.push(e);
        }
    }
    
    return result;
};
;

var ActionEncoder, Agari, CliantController, CliantStage, DummyMJPlayerStates, HaiChecker, HaiCounter, MJ, MJState, Mentsu, ModelBase, MyPlayer, NPC, Plain, Player, Player1, ServerController, ServerManager, Stage, Yaku, YakuCheck, Yama, count_hai, get_machi, pop_mentsu, search_heads, search_koutsu, search_syuntsu, search_tartsu,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MJ = (function() {

  function MJ() {}

  MJ.jihai = function(p) {
    return p > 26;
  };

  MJ.kind = function(p) {
    return Math.floor(p / 9);
  };

  MJ.number = function(p) {
    return Math.floor(p % 9);
  };

  MJ.count_yaochu = function(arr) {
    var a, i, _i, _len;
    a = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      i = arr[_i];
      if (i === 0 || i === 8 || i === 9 || i === 17 || i === 18 || i === 26 || (26 < i && i < 34)) {
        a++;
      }
    }
    return a;
  };

  MJ.sangen = function(p) {
    return p === 31 || p === 32 || p === 33;
  };

  MJ.count_jihai = function(arr) {
    var a, i, _i, _len;
    a = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      i = arr[_i];
      if (MJ.jihai(i)) {
        a++;
      }
    }
    return a;
  };

  MJ.green = function(p) {
    return p === 19 || p === 20 || p === 21 || p === 23 || p === 25 || p === 32;
  };

  return MJ;

})();

HaiCounter = (function() {

  function HaiCounter() {
    this.p = [];
    this.nakis = [];
  }

  HaiCounter.prototype.count = function(pai) {
    var c, i, _i, _len, _ref;
    c = 0;
    _ref = this.p;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i === pai) {
        c += 1;
      }
    }
    return c;
  };

  HaiCounter.prototype.heads = function() {
    var a, i, _i, _len, _ref;
    a = [];
    _ref = this.p.uniq();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (this.count(i) > 1) {
        a.push([i, i]);
      }
    }
    return a;
  };

  HaiCounter.prototype.tartsu = function() {
    var a, p, q, _i, _j, _len, _len1, _ref, _ref1;
    a = [];
    _ref = this.p;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _ref1 = this.p;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        q = _ref1[_j];
        if (!MJ.jihai(p) && !MJ.jihai(q) && MJ.kind(p) === MJ.kind(q)) {
          if (p < q && q - p < 3) {
            a.push([p, q]);
          }
        }
      }
    }
    return a;
  };

  HaiCounter.prototype.count_kinds = function() {
    return this.p.uniq().length;
  };

  HaiCounter.prototype.has_koutsu = function(hai) {
    return this.count(hai) > 2;
  };

  HaiCounter.prototype.koutsu = function() {
    var a, b, i, _i, _len, _ref;
    a = [];
    _ref = this.p.uniq();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (this.has_koutsu(i)) {
        b = [i, i, i];
        b.kind = 2;
        a.push(b);
      }
    }
    return a;
  };

  HaiCounter.prototype.syuntsu = function() {
    var a, b, i, _i, _len, _ref;
    a = [];
    _ref = this.p;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (MJ.jihai(i) || i % 9 > 6) {
        continue;
      }
      if (this.count(i + 1) > 0 && this.count(i + 2)) {
        b = [i, i + 1, i + 2];
        b.kind = 1;
        a.push(b);
      }
    }
    return a;
  };

  HaiCounter.prototype.add_naki = function(m) {
    var i, _i, _len;
    if (m.length === 4) {
      m.kan = true;
    }
    for (_i = 0, _len = m.length; _i < _len; _i++) {
      i = m[_i];
      this.p.splice(this.p.indexOf(i), 1);
    }
    return this.nakis.push(m);
  };

  return HaiCounter;

})();

count_hai = function(arr, pai) {
  var c, i, _i, _len;
  c = 0;
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    i = arr[_i];
    if (i === pai) {
      c += 1;
    }
  }
  return c;
};

search_heads = function(arr) {
  var a, b, i, _i, _len, _ref;
  a = [];
  _ref = arr.uniq();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    if (count_hai(arr, i) > 1) {
      b = [i, i];
      b.kind = 0;
      a.push(b);
    }
  }
  return a;
};

search_tartsu = function(arr) {
  var a, i, j, _i, _j, _len, _len1;
  a = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    i = arr[_i];
    for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
      j = arr[_j];
      if (!MJ.jihai(i) && !MJ.jihai(j) && MJ.kind(i) === MJ.kind(j)) {
        if (j > i && j - i < 3) {
          a.push([i, j]);
        }
      }
    }
  }
  return a;
};

search_koutsu = function(arr) {
  var a, b, i, _i, _len, _ref;
  a = [];
  _ref = arr.uniq();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    if (count_hai(arr, i) > 2) {
      b = [i, i, i];
      b.kind = 2;
      a.push(b);
    }
  }
  return a;
};

search_syuntsu = function(arr) {
  var a, b, i, _i, _len;
  a = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    i = arr[_i];
    if (MJ.jihai(i) || i % 9 > 6) {
      continue;
    }
    if (count_hai(arr, i + 1) > 0 && count_hai(arr, i + 2) > 0) {
      b = [i, i + 1, i + 2];
      b.kind = 1;
      a.push(b);
    }
  }
  return a;
};

pop_mentsu = function(arr1, arr2) {
  var i, _i, _len;
  for (_i = 0, _len = arr2.length; _i < _len; _i++) {
    i = arr2[_i];
    arr1.splice(arr1.indexOf(i), 1);
  }
  return arr1;
};

get_machi = function(m) {
  var a, b;
  if (m[0] < m[1]) {
    a = m[0];
    b = m[1];
  } else {
    a = m[1];
    b = m[0];
  }
  if (b - a === 1) {
    if (a % 9 === 0) {
      return [b + 1];
    } else if (b % 9 === 8) {
      return [a - 1];
    } else {
      return [a - 1, b + 1];
    }
  } else {
    return [a + 1];
  }
};

Mentsu = (function() {

  function Mentsu() {}

  return Mentsu;

})();

HaiChecker = (function() {

  function HaiChecker(state) {
    this.state = state;
    this.hais = new HaiCounter;
    this.agaris = [];
    this.machis = [];
    this.tehai = [];
    this.last_hai;
  }

  HaiChecker.prototype.can_pon = function(h) {
    if (this.hais.count(h) > 1) {
      return [h];
    }
  };

  HaiChecker.prototype.can_chi = function(h) {
    var can_chi_hais, i, _i, _len, _ref;
    if (MJ.jihai(h)) {
      return false;
    }
    can_chi_hais = [];
    _ref = this.hais.tartsu();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (MJ.kind(i[0]) !== MJ.kind(h)) {
        continue;
      }
      switch (i[1] - i[0]) {
        case 1:
          if (MJ.number(i[0]) === 0) {
            if (h - i[1] === 1) {
              can_chi_hais.push(i[0], i[1]);
            }
          } else if (MJ.number(i[1]) === 8) {
            if (i[0] - h === 1) {
              can_chi_hais.push(i[0], i[1]);
            }
          } else {
            if (h - i[1] === 1 || i[0] - h === 1) {
              can_chi_hais.push(i[0], i[1]);
            }
          }
          break;
        case 2:
          if (i[1] - h === 1 && h - i[0] === 1) {
            can_chi_hais.push(i[0], i[1]);
          }
      }
    }
    if (can_chi_hais.length === 0) {
      return false;
    } else {
      return can_chi_hais;
    }
  };

  HaiChecker.prototype.push_tehai = function(hai) {
    this.hais.p.push(hai);
    this.tehai.push(hai);
    return this.last_hai = hai;
  };

  HaiChecker.prototype.clear_tehai = function() {
    this.hais.p = [];
    return this.tehai = [];
  };

  HaiChecker.prototype.pon = function(p, con) {
    var m;
    this.push_tehai(p);
    m = [p].concat(con);
    m.fooroh = true;
    m.kind = 2;
    return this.hais.add_naki(m);
  };

  HaiChecker.prototype.chi = function(p, con) {
    var m;
    this.push_tehai(p);
    m = [p].concat(con);
    m.fooroh = true;
    m.kind = 1;
    return this.hais.add_naki(m);
  };

  HaiChecker.prototype.ankan = function(p, con) {
    this.push_tehai(p);
    return this.hais.add_naki([p].concat(con));
  };

  HaiChecker.prototype.daiminkan = function(p, con) {
    var m;
    this.push_tehai(p);
    m = [p].concat(con);
    m.fooroh = true;
    return this.hais.add_naki(m);
  };

  HaiChecker.prototype.kakan = function(p, con) {
    this.push_tehai(p);
    a.push(p);
    return a.kan = true;
  };

  HaiChecker.prototype.dahai = function(h) {
    this.hais.p.splice(h, 1);
    return this.tehai.splice(h, 1);
  };

  HaiChecker.prototype.remove_from_hais = function(h) {
    return this.hais.p.splice(this.hais.p.indexOf(h), 1);
  };

  HaiChecker.prototype.remove = function(h) {
    this.hais.p.splice(this.hais.p.indexOf(h), 1);
    return this.tehai.splice(this.tehai.indexOf(h), 1);
  };

  HaiChecker.prototype.can_agari = function() {
    return this.agaris.length !== 0;
  };

  HaiChecker.prototype.get_agari = function() {
    var i, max, result, s, _i, _len, _ref;
    max = 0;
    result = null;
    _ref = this.agaris;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      s = i.get_score();
      if (max < s.score) {
        max = s.score;
        result = s;
      }
    }
    return result;
  };

  HaiChecker.prototype.get_actually_score = function() {
    var a, honba, oya, score, tscore;
    a = this.get_agari();
    if (!a) {
      throw "can't agari";
    }
    score = a.score;
    tscore = [0, 0];
    oya = this.state.is_oya();
    honba = this.state.honba();
    if (oya) {
      score = Math.ceil(score * 1.5 / 100) * 100;
      tscore[0] = Math.ceil(score / 300) * 100 + 100 * honba;
      score += 300 * honba;
    } else {
      score = Math.ceil(score / 100) * 100;
      tscore[0] = Math.ceil(score / 400) * 100 + 100 * honba;
      tscore[1] = Math.ceil(score / 200) * 100 + 100 * honba;
      score += 300 * honba;
    }
    a.score = score;
    a.scores = tscore;
    return a;
  };

  HaiChecker.prototype.check_agari = function() {
    var a, aaaa, ag, count_back_hash, count_hash, h, hai, hai_count, heads, i, j, loop_flag, m, mens, mentsu_koho_torios, mentsu_kohos, nakis, t, tartsu, tmp, tmp1, tmp_tehai, torio, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _s, _t, _u;
    this.mentsus = [];
    nakis = this.hais.nakis;
    this.agaris.length = 0;
    this.machis.length = 0;
    tmp_tehai = this.hais.p.slice();
    heads = this.hais.heads();
    if (heads.length === 7) {
      this.agaris.push(new Agari(this.tehai, this.last_hai, heads, this.state));
    }
    mentsu_kohos = this.hais.koutsu().concat(this.hais.syuntsu());
    if (mentsu_kohos.length + nakis.length >= 3) {
      hai_count = {};
      for (_i = 0, _len = tmp_tehai.length; _i < _len; _i++) {
        i = tmp_tehai[_i];
        if (!hai_count[i]) {
          hai_count[i] = 1;
        } else {
          hai_count[i]++;
        }
      }
      mentsu_koho_torios = [];
      generateCombinations(mentsu_kohos, 3 - nakis.length, function(arr) {
        return mentsu_koho_torios.push(arr);
      });
      count_back_hash = {};
      for (i in count_hash) {
        j = count_hash[i];
        count_back_hash[i] = 0;
      }
      for (_j = 0, _len1 = mentsu_koho_torios.length; _j < _len1; _j++) {
        torio = mentsu_koho_torios[_j];
        loop_flag = true;
        count_hash = {};
        for (i in hai_count) {
          j = hai_count[i];
          count_hash[i] = j;
        }
        for (_k = 0, _len2 = torio.length; _k < _len2; _k++) {
          m = torio[_k];
          for (_l = 0, _len3 = m.length; _l < _len3; _l++) {
            hai = m[_l];
            if (count_hash[hai] === 0) {
              loop_flag = false;
              break;
            } else {
              count_hash[hai]--;
            }
          }
          if (!loop_flag) {
            break;
          }
        }
        if (loop_flag) {
          this.mentsus.push({
            others: []
          });
          this.mentsus[this.mentsus.length - 1].torio = torio;
          for (i in count_hash) {
            j = count_hash[i];
            for (t = _m = 0; 0 <= j ? _m < j : _m > j; t = 0 <= j ? ++_m : --_m) {
              this.mentsus[this.mentsus.length - 1].others.push(parseInt(i));
            }
          }
        }
      }
      if (this.mentsus.length !== 0) {
        _ref = this.mentsus;
        for (_n = 0, _len4 = _ref.length; _n < _len4; _n++) {
          i = _ref[_n];
          heads = search_heads(i.others);
          switch (heads.length) {
            case 0:
              mens = search_syuntsu(i.others).concat(search_koutsu(i.others));
              for (_o = 0, _len5 = mens.length; _o < _len5; _o++) {
                m = mens[_o];
                a = pop_mentsu(i.others.slice(), m);
                this.machis.push([a[0], a[1]]);
                if (a[1]) {
                  this.machis.push([a[1], a[0]]);
                }
              }
              break;
            case 1:
              pop_mentsu(i.others, heads[0]);
              mens = search_syuntsu(i.others).concat(search_koutsu(i.others));
              if (mens.length !== 0) {
                i.torio.push(mens[0]);
                ag = heads.concat(i.torio).concat(nakis);
                this.agaris.push(new Agari(this.tehai, this.last_hai, ag, this.state));
              } else {
                tartsu = search_tartsu(i.others);
                if (tartsu.length !== 0) {
                  for (_p = 0, _len6 = tartsu.length; _p < _len6; _p++) {
                    t = tartsu[_p];
                    _ref1 = get_machi(t);
                    for (_q = 0, _len7 = _ref1.length; _q < _len7; _q++) {
                      aaaa = _ref1[_q];
                      this.machis.push([aaaa, pop_mentsu(i.others.slice(), t)[0]]);
                    }
                  }
                }
              }
              break;
            case 2:
              for (_r = 0, _len8 = heads.length; _r < _len8; _r++) {
                h = heads[_r];
                tmp = i.others.slice();
                pop_mentsu(tmp, h);
                mens = search_syuntsu(tmp).concat(search_koutsu(tmp));
                if (mens.length !== 0) {
                  i.torio.push(mens[0]);
                  ag = [h].concat(i.torio).concat(nakis);
                  this.agaris.push(new Agari(this.tehai, this.last_hai, ag, this.state));
                } else {
                  tartsu = search_tartsu(tmp);
                  if (tartsu.length !== 0) {
                    for (_s = 0, _len9 = tartsu.length; _s < _len9; _s++) {
                      t = tartsu[_s];
                      _ref2 = get_machi(t);
                      for (_t = 0, _len10 = _ref2.length; _t < _len10; _t++) {
                        aaaa = _ref2[_t];
                        this.machis.push([aaaa, pop_mentsu(tmp.slice(), t)[0]]);
                      }
                    }
                  }
                }
              }
              tmp1 = i.others.slice();
              pop_mentsu(tmp1, heads[0]);
              pop_mentsu(tmp1, heads[1]);
              this.machis.push([heads[0][0], tmp1[0]]);
              if (heads[1][0]) {
                this.machis.push([heads[1][0], tmp1[0]]);
              }
          }
        }
      }
    }
    heads = this.hais.heads();
    if (heads.length === 6) {
      tmp = tmp_tehai.slice();
      for (_u = 0, _len11 = heads.length; _u < _len11; _u++) {
        i = heads[_u];
        pop_mentsu(tmp, i);
      }
      this.machis.push([tmp[0], tmp[1]]);
      if (tmp[1]) {
        this.machis.push([tmp[1], tmp[0]]);
      }
    }
    return this.machis = this.machis.uniq();
  };

  return HaiChecker;

})();

DummyMJPlayerStates = (function() {

  function DummyMJPlayerStates(a, b) {}

  DummyMJPlayerStates.prototype.doras = function() {
    return [];
  };

  DummyMJPlayerStates.prototype.yakuhai = function(h) {
    return false;
  };

  DummyMJPlayerStates.prototype.yakuhai = function(p) {
    return false;
  };

  DummyMJPlayerStates.prototype.jikaze = function(p) {
    return false;
  };

  DummyMJPlayerStates.prototype.bakaze = function(p) {
    return false;
  };

  DummyMJPlayerStates.prototype.get_yama_length = function() {
    return 30;
  };

  DummyMJPlayerStates.prototype.menzen = function() {
    return true;
  };

  DummyMJPlayerStates.prototype.tsumo = function() {
    return true;
  };

  DummyMJPlayerStates.prototype.reach = function() {
    return false;
  };

  DummyMJPlayerStates.prototype.reach_count = function() {
    return false;
  };

  return DummyMJPlayerStates;

})();

Yaku = (function() {

  function Yaku(name, fan) {
    this.name = name;
    this.fan = fan;
  }

  Yaku.prototype.yakuman = function() {
    return this.fan > 12;
  };

  return Yaku;

})();

YakuCheck = (function() {

  function YakuCheck() {}

  YakuCheck.prototype.tanyao = function() {
    if (MJ.count_yaochu(this.tehai) === 0) {
      this.yakus.push(new Yaku("タンヤオ", 1));
      return true;
    }
  };

  YakuCheck.prototype.mentsumo = function() {
    if (this.menzen && this.tsumo) {
      this.yakus.push(new Yaku("門前清自摸和", 1));
      return true;
    }
  };

  YakuCheck.prototype.reach = function() {
    if (this.state.reach()) {
      if (this.state.is_doublereach()) {
        this.yakus.push(new Yaku("ダブル立直", 2));
      } else {
        this.yakus.push(new Yaku("立直", 1));
      }
      if (this.state.is_ippatsu()) {
        this.yakus.push(new Yaku("一発", 1));
      }
      return true;
    }
  };

  YakuCheck.prototype.houtei = function() {
    if (this.state.get_yama_length() === 0) {
      if (this.tsumo) {
        this.yakus.push(new Yaku("海底摸月", 1));
      } else {
        this.yakus.push(new Yaku("河底撈魚", 1));
      }
      return true;
    }
  };

  YakuCheck.prototype.pinhu = function() {
    var i, _i, _len, _ref;
    _ref = this.mentsus.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.kind !== 1) {
        return false;
      }
    }
    if (this.state.yakuhai(this.mentsus[0][0])) {
      return false;
    }
    if (!this.menzen) {
      return false;
    }
    if (!this.get_machi()[3]) {
      return false;
    }
    this.yakus.push(new Yaku("平和", 1));
    return true;
  };

  YakuCheck.prototype.yakuhai = function() {
    var m, _i, _len, _ref, _results;
    _ref = this.mentsus;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2) {
        if (this.state.jikaze(m[0]) && this.state.bakaze(m[0])) {
          _results.push(this.yakus.push(new Yaku("役牌", 2)));
        } else if (this.state.yakuhai(m[0])) {
          _results.push(this.yakus.push(new Yaku("役牌", 1)));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  YakuCheck.prototype.epei = function() {
    if (this.mentsus.uniq().length === 4 && this.menzen) {
      return this.yakus.push(new Yaku("一盃口", 1));
    }
  };

  YakuCheck.prototype.ryanpei = function() {
    if (this.mentsus.uniq().length === 3 && this.menzen) {
      return this.yakus.push(new Yaku("二盃口", 3));
    }
  };

  YakuCheck.prototype.toitoi = function() {
    var m, _i, _len, _ref;
    _ref = this.mentsus.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind !== 2) {
        return;
      }
    }
    return this.yakus.push(new Yaku("対々和", 2));
  };

  YakuCheck.prototype.sanan = function() {
    var m, _i, _len, _ref, _results;
    this.anko_count = 0;
    _ref = this.mentsus;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 && !m.fooroh) {
        this.anko_count++;
      }
      if (this.anko_count > 3) {
        _results.push(this.yakus.push(new Yaku("三暗刻", 2)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  YakuCheck.prototype.doujyun = function() {
    var colors, flag, m, s, syuntsu, t, _i, _j, _k, _len, _len1, _len2, _ref;
    flag = false;
    syuntsu = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 1) {
        syuntsu.push(m);
      }
    }
    if (syuntsu.length >= 3) {
      for (_j = 0, _len1 = syuntsu.length; _j < _len1; _j++) {
        s = syuntsu[_j];
        colors = [];
        for (_k = 0, _len2 = syuntsu.length; _k < _len2; _k++) {
          t = syuntsu[_k];
          if (MJ.number(s[0]) === MJ.number(t[0])) {
            colors[MJ.kind(t[0])] = true;
          }
        }
        if (colors[0] && colors[1] && colors[2]) {
          flag = true;
        }
      }
      if (flag) {
        if (this.menzen) {
          return this.yakus.push(new Yaku("三色同順", 2));
        } else {
          return this.yakus.push(new Yaku("三色同順", 1));
        }
      }
    }
  };

  YakuCheck.prototype.doukou = function() {
    var colors, f, koutsu, m, s, t, _i, _j, _k, _len, _len1, _len2, _ref;
    f = false;
    koutsu = [];
    colors = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 || m.kind === 3) {
        koutsu.push(m);
      }
    }
    if (koutsu.length >= 3) {
      for (_j = 0, _len1 = koutsu.length; _j < _len1; _j++) {
        s = koutsu[_j];
        colors = [];
        for (_k = 0, _len2 = koutsu.length; _k < _len2; _k++) {
          t = koutsu[_k];
          if (MJ.number(s[0]) === MJ.number(t[0])) {
            colors[MJ.kind(t[0])] = true;
          }
        }
      }
      if (colors[0] && colors[1] && colors[2]) {
        return this.yakus.push(new Yaku("三色同刻", 2));
      }
    }
  };

  YakuCheck.prototype.ssangen = function() {
    var c, m, _i, _len, _ref;
    if (!MJ.sangen(this.mentsus[0][0])) {
      return;
    }
    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 && MJ.sangen(m[0])) {
        c++;
      }
    }
    if (c > 2) {
      return this.yakus.push(new Yaku("小三元", 2));
    }
  };

  YakuCheck.prototype.ittu = function() {
    var a, m, s, syuntsu, _i, _j, _len, _len1, _ref;
    syuntsu = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 1) {
        syuntsu.push(m);
      }
    }
    if (syuntsu.length >= 3) {
      a = [];
      for (_j = 0, _len1 = syuntsu.length; _j < _len1; _j++) {
        s = syuntsu[_j];
        a[s[0]] = 1;
      }
      if (a[0] && a[3] && a[6] || a[9] && a[12] && a[15] || a[18] && a[21] && a[24]) {
        if (this.menzen) {
          return this.yakus.push(new Yaku("一気通貫", 2));
        } else {
          return this.yakus.push(new Yaku("一気通貫", 1));
        }
      }
    }
  };

  YakuCheck.prototype.chanta = function() {
    var m, _i, _len, _ref;
    if (MJ.count_yaochu(this.tehai) === 14) {
      this.chinroh_flag = true;
      return this.yakus.push(new Yaku("混老頭", 2));
    } else {
      this.chinroh_flag = false;
      _ref = this.mentsus;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        this.jflag = true;
        if (MJ.count_yaochu(m) === 0) {
          return;
        }
        if (MJ.count_jihai(m) > 0) {
          this.jflag = false;
        }
      }
      if (this.jflag) {
        if (this.menzen) {
          return this.yakus.push(new Yaku("純チャン", 3));
        } else {
          return this.yakus.push(new Yaku("純チャン", 2));
        }
      } else {
        if (this.menzen) {
          return this.yaku.push(new Yaku("チャンタ", 2));
        } else {
          return this.yaku.push(new Yaku("チャンタ", 1));
        }
      }
    }
  };

  YakuCheck.prototype.honitsu = function() {
    var f, kind, p, _i, _len, _ref;
    kind = null;
    f = 0;
    _ref = this.tehai;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (MJ.jihai(p)) {
        f = 1;
      } else {
        if (kind) {
          if (kind !== MJ.kind(p)) {
            f = 2;
            break;
          }
        } else {
          kind = MJ.kind(p);
        }
      }
    }
    if (f === 0) {
      if (this.menzen) {
        return this.yakus.push(new Yaku("清一色", 6));
      } else {
        return this.yakus.push(new Yaku("清一色", 5));
      }
    } else if (f === 1) {
      if (this.menzen) {
        return this.yakus.push(new Yaku("混一色", 3));
      } else {
        return this.yakus.push(new Yaku("混一色", 2));
      }
    }
  };

  YakuCheck.prototype.sankan = function() {
    var c, m, _i, _len, _ref;
    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kan) {
        c++;
      }
    }
    if (c === 3) {
      return this.yakus.push(new Yaku("三槓子", 2));
    }
  };

  YakuCheck.prototype.suan = function() {
    var c, m, _i, _len, _ref;
    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 && !m.fooroh) {
        c++;
      }
    }
    if (c === 4) {
      if (this.mentsus[0][0] === this.last_hai) {
        return this.yakus.push(new Yaku("四暗刻単騎", 26));
      } else {
        return this.yakus.push(new Yaku("四暗刻", 13));
      }
    }
  };

  YakuCheck.prototype.dsangen = function() {
    var c, m, _i, _len, _ref;
    c = 0;
    _ref = this.mentsus.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (MJ.sangen(m[0])) {
        c += 1;
      }
    }
    if (c > 3) {
      return this.yakus.push(new Yaku("大三元", 13));
    }
  };

  YakuCheck.prototype.tooe = function() {
    var m, _i, _len, _ref;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (!MJ.jihai(m[0])) {
        return;
      }
    }
    return this.yakus.push(new Yaku("字一色", 13));
  };

  YakuCheck.prototype.green = function() {
    var p, _i, _len, _ref;
    _ref = this.tehai;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (!MJ.green(p)) {
        return;
      }
    }
    return this.yakus.push(new Yaku("緑一色", 13));
  };

  YakuCheck.prototype.chinroh = function() {
    var p, _i, _len, _ref;
    if (!this.chinroh_flag) {
      return;
    }
    _ref = this.tehai;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (MJ.jihai(p)) {
        return;
      }
    }
    return this.yakus.push(new Yaku("清老頭", 13));
  };

  YakuCheck.prototype.sushi = function() {
    var dcount, m, scount, _i, _len, _ref, _ref1, _ref2;
    dcount = 0;
    scount = 0;
    if ((26 < (_ref = this.mentsus[0][0]) && _ref < 31)) {
      scount++;
    }
    _ref1 = this.mentsus.slice(1, 5);
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      m = _ref1[_i];
      if ((26 < (_ref2 = m[0]) && _ref2 < 31)) {
        dcount++;
      }
    }
    if (dcount > 3) {
      return this.yakus.push(new Yaku("大四喜", 13));
    } else if (dcount + scount > 3) {
      return this.yakus.push(new Yaku("小四喜", 13));
    }
  };

  YakuCheck.prototype.sukan = function() {
    var c, m, _i, _len, _ref;
    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kan) {
        c++;
      }
    }
    if (c === 4) {
      return this.yakus.push(new Yaku("四槓子", 13));
    }
  };

  YakuCheck.prototype.tyuren = function() {};

  YakuCheck.prototype.kokushi = function() {
    if (search_heads(this.tehai).length === 1) {
      if (MJ.count_yaochu(this.tehai) === 14) {
        if (this.pais.uniq().length === 13) {
          return this.yakus.push(new Yaku("国士無双（単騎待ち）", 26));
        } else if (this.tehai.uniq().length === 13) {
          return this.yakus.push(new Yaku("国士無双", 13));
        }
      }
    }
  };

  YakuCheck.prototype.tenho = function() {};

  YakuCheck.prototype.chiho = function() {};

  YakuCheck.prototype.check_yaku = function() {
    if (!this.checked) {
      this.mentsumo();
      this.reach();
      this.tanyao();
      this.pinhu_flag = this.pinhu();
      this.yakuhai();
      this.epei();
      this.ryanpei();
      this.toitoi();
      this.sanan();
      this.suan();
      this.sankan();
      this.sukan();
      this.doujyun();
      this.doukou();
      this.ittu();
      this.honitsu();
      this.chanta();
      this.dsangen();
      this.ssangen();
      this.chinroh();
      this.tooe();
      this.sushi();
      this.green();
      this.tenho();
      this.chiho();
      return this.checked = true;
    }
  };

  return YakuCheck;

})();

Agari = (function(_super) {

  __extends(Agari, _super);

  function Agari(pais, last_hai, mentsus, state) {
    this.pais = pais;
    this.last_hai = last_hai;
    this.tehai = this.pais.slice();
    this.tehai.push(last_hai);
    this.tsumo = state.tsumo();
    this.mentsus = mentsus.slice();
    this.yakus = [];
    this.state = state;
    this.menzen = state.menzen();
    this.yakuman = false;
    this.fu = 20;
    this.pinhu_flag = false;
    this.tiitoi = false;
    this.checked = false;
    this.score = 0;
  }

  Agari.prototype.get_yaku = function() {
    var yakuman;
    if (this.mentsus.length === 1) {
      if (this.kokushi()) {
        this.tenho();
        this.chiho();
      }
    } else {
      if (this.mentsus.length === 7) {
        this.yakus.push(new Yaku("七対子", 2));
        this.tiitoi = true;
      }
      this.check_yaku();
    }
    yakuman = this.yakus.filter(function(y) {
      return y.yakuman();
    });
    if (yakuman.length !== 0) {
      this.yakus = yakuman;
      this.mes = "役満";
      this.yakuman = true;
    }
    return this.yakus;
  };

  Agari.prototype.get_score = function() {
    if (!this.score) {
      this.calc_score();
    }
    return {
      fu: this.fu,
      fan: this.fan,
      score: this.score,
      message: this.mes,
      yakus: this.yakus
    };
  };

  Agari.prototype.calc_score = function() {
    var dora, f, i, j, m, machi, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
    this.get_yaku();
    dora = 0;
    this.fu = 20;
    _ref = this.state.doras();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _ref1 = this.tehai;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        j = _ref1[_j];
        if (i === j) {
          dora++;
        }
      }
    }
    if (dora > 0) {
      this.yakus.push(new Yaku("ドラ", dora));
    }
    if (this.tiitoi) {
      this.fu = 25;
    } else {
      if (this.menzen && !this.tsumo) {
        this.fu += 10;
      } else if (!this.menzen && !this.tsumo && this.pinhu_flag) {
        this.fu += 10;
      }
      _ref2 = this.mentsus;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        m = _ref2[_k];
        f = 0;
        if (m.kind === 2) {
          if (m.kind === 2 && !m.kan) {
            if (m.fooroh) {
              f = 2;
            } else {
              f = 4;
            }
          } else if (m.kan) {
            if (m.fooroh) {
              f = 8;
            } else {
              f = 16;
            }
          }
          if (MJ.count_yaochu(m) >= 3) {
            f *= 2;
          }
          this.fu += f;
        }
      }
      if (this.state.yakuhai(this.mentsus[0])) {
        this.fu += 2;
      }
      machi = this.get_machi();
      if (machi[0] || machi[2] || machi[4]) {
        this.fu += 2;
      }
      this.fu = (Math.ceil(this.fu / 10)) * 10;
    }
    this.fan = 0;
    _ref3 = this.yakus;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      y = _ref3[_l];
      this.fan += y.fan;
    }
    this.score = this.fu * (Math.pow(2, this.fan + 2));
    this.score = this.score * 4;
    if (this.score >= 8000) {
      if (this.yakuman) {
        this.mes = "役満";
        return this.score = (this.fan / 13) * 32000;
      } else if (this.fan === 5) {
        this.mes = "満貫";
        return this.score = 8000;
      } else if (this.fan < 8) {
        this.mes = "跳満";
        return this.score = 12000;
      } else if (this.fan < 11) {
        this.mes = "倍満";
        return this.score = 16000;
      } else if (this.fan < 13) {
        this.mes = "三倍満";
        return this.score = 24000;
      } else if (!this.yakuman) {
        this.mes = "数え役満";
        return this.score = 32000;
      }
    } else {
      return this.mes = this.fu + "符" + this.fan + "翻";
    }
  };

  Agari.prototype.get_machi = function() {
    var m, machi, tartsu, _i, _len, _ref, _ref1,
      _this = this;
    machi = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (_ref1 = this.last_hai, __indexOf.call(m, _ref1) >= 0) {
        if (!m.fooroh && !m.kan) {
          if (m.kind === 0) {
            machi[0] = true;
          } else if (m.kind === 2) {
            machi[1] = true;
          } else if (m.kind === 1) {
            tartsu = m.filter(function(p) {
              return p !== _this.last_hai;
            });
            if (MJ.number(tartsu[0]) + MJ.number(tartsu[1]) === 1 || MJ.number(tartsu[0]) + MJ.number(tartsu[1]) === 15) {
              machi[2] = true;
            } else if (tartsu[0] - tartsu[1] === 1 || tartsu[0] - tartsu[1] === -1) {
              machi[3] = true;
            } else {
              machi[4] = true;
            }
          }
        }
      }
    }
    return machi;
  };

  return Agari;

})(YakuCheck);

/*Copyright (c) 2012 hoo89 (hoo89@me.com) Licensed MIT
*/


ModelBase = (function() {

  function ModelBase() {
    this.listeners = {};
  }

  ModelBase.prototype.add_listener = function(type, a) {
    if (!this.listeners[type]) {
      this.listeners[type] = [a];
    } else {
      this.listeners[type].push(a);
    }
    return a;
  };

  ModelBase.prototype.notify = function(action) {
    var i, _i, _len, _ref, _results;
    if (this.listeners[action.type]) {
      _ref = this.listeners[action.type];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(i(action));
      }
      return _results;
    }
  };

  return ModelBase;

})();

Stage = (function(_super) {

  __extends(Stage, _super);

  function Stage() {
    var i, _i;
    Stage.__super__.constructor.apply(this, arguments);
    this.states = {
      start_kyoku: 0,
      tsumo: 1,
      dahai: 2,
      other_player: 3,
      end_kyoku: 4,
      wait_for_response: 5
    };
    this.state = this.states.start_kyoku;
    this.action_que = [];
    this.rest_actions = [];
    this.ActionSortIndex = {
      hora: 0,
      pon: 1,
      kan: 2,
      chi: 3,
      none: 4
    };
    this.players = [];
    for (i = _i = 0; _i <= 3; i = ++_i) {
      if (i === 0) {
        this.players.push(new Plain(i, i));
      } else {
        this.players.push(new Plain(i, i));
      }
    }
    this.kyoku = 1;
    this.titya = 0;
    this.oya = this.titya;
    this.honba = 0;
    this.bakaze = 0;
    this.kyotaku = 0;
  }

  Stage.prototype.get_action = function() {
    var a, i, _i, _len, _ref;
    _ref = this.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.action) {
        this.action_que.push(i.pop_action());
      }
    }
    if (this.action_que.length < 4) {
      return;
    }
    switch (this.state) {
      case 0:
        a = this.get_start_action();
        break;
      case 1:
        a = this.get_tsumo_action();
        break;
      case 2:
        a = this.get_dahai_action();
        break;
      case 3:
        a = this.get_other_player_action();
        break;
      case 4:
        a = this.get_end_kyoku();
    }
    this.action_que.length = 0;
    return a;
  };

  Stage.prototype.update = function() {
    var a;
    a = this.get_action();
    if (a) {
      this.act(a);
      return a;
    }
  };

  Stage.prototype.get_start_action = function() {
    var a, i, j, _i, _j;
    this.yama = new Yama;
    this.yama.shuffle();
    this.wanpai = this.yama.pop_wanpai();
    a = {
      "type": "start_kyoku",
      "bakaze": this.bakaze,
      "kyoku": this.kyoku,
      "honba": this.honba,
      "kyotaku": this.kyotaku,
      "oya": this.oya,
      "dora_marker": this.wanpai[0],
      "tehais": [[], [], [], []]
    };
    for (i = _i = 0; _i < 4; i = ++_i) {
      for (j = _j = 0; _j < 13; j = ++_j) {
        a.tehais[i].push(this.yama.shift());
      }
    }
    return a;
  };

  Stage.prototype.get_tsumo_action = function() {
    if (this.yama.length() === 0) {
      return {
        type: "ryukyoku"
      };
    } else {
      return {
        type: "tsumo",
        actor: this.now_player,
        pai: this.yama.shift()
      };
    }
  };

  Stage.prototype.get_dahai_action = function() {
    var i, _i, _len, _ref;
    _ref = this.action_que;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.actor === this.now_player) {
        return i;
      }
    }
  };

  Stage.prototype.get_other_player_action = function() {
    var a, p,
      _this = this;
    if (this.rest_actions.length !== 0) {
      return this.rest_actions.pop();
    }
    this.action_que.sort(function(a, b) {
      var diff;
      diff = _this.ActionSortIndex[a.type] - _this.ActionSortIndex[b.type];
      if (diff !== 0 || a.type === "none") {
        return diff;
      } else {
        return _this.now_player.get_distance(a.actor) - _this.now_player.get_distance(b.actor);
      }
    });
    a = this.action_que[0];
    if (a.type !== "hora" && this.reached_player !== false) {
      p = this.reached_player;
      this.reached_player = false;
      this.rest_actions = [a];
      return {
        type: "reach_accepted",
        actor: p
      };
    }
    return a;
  };

  Stage.prototype.get_end_kyoku = function() {
    return {
      type: "end_kyoku"
    };
  };

  Stage.prototype.act = function(a) {
    var i, _i, _len, _ref;
    switch (a.type) {
      case "start_kyoku":
        this.start(a);
        this.state = this.states.tsumo;
        break;
      case "tsumo":
        this.turn++;
        a.actor.tsumo(a);
        this.state = this.states.dahai;
        break;
      case "hora":
        a.actor.hora(a);
        this.agari(a);
        this.end_kyoku(a);
        this.state = this.states.end_kyoku;
        break;
      case "reach":
        a.actor.reach_naki_count = this.naki_count;
        this.reached_player = a.actor;
        break;
      case "reach_accepted":
        a.actor.reach_accepted(a);
        this.kyotaku++;
        a.actor.score -= 1000;
        break;
      case "dahai":
        a.actor.dahai(a);
        this.state = this.states.other_player;
        break;
      case "pon":
        a.actor.pon(a);
        this.phase_set(a.actor.number);
        this.state = this.states.dahai;
        break;
      case "chi":
        a.actor.chi(a);
        this.phase_set(a.actor.number);
        this.state = this.states.dahai;
        break;
      case "kan":
        if (a.target === a.actor) {
          a.actor.kan(a);
        } else {
          a.actor.minkan(a);
          this.phase_set(a.actor.number);
          this.state = this.states.dahai;
        }
        break;
      case "none":
        this.next_phase();
        this.state = this.states.tsumo;
        break;
      case "ryukyoku":
        this.end_kyoku(a);
        this.state = this.states.end_kyoku;
        break;
      case "end_kyoku":
        this.state = this.states.start_kyoku;
    }
    if (a.type === "pon" || a.type === "chi" || a.type === "kan") {
      this.naki_count++;
    }
    this.notify(a);
    console.log(a);
    _ref = this.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.ask(a);
    }
    return a;
  };

  Stage.prototype.start = function(a) {
    var i, j, n, _i, _j, _len, _len1, _ref, _ref1, _results;
    this.action_que.length = 0;
    _ref = this.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.set_kyoku();
      i.state = new MJState(i, this);
      i.checker = new HaiChecker(i.state);
    }
    this.kan_count = 0;
    this.wanpai = [];
    this.doras = [];
    this.uradoras = [];
    this.reachbou = [0, 0, 0, 0];
    this.phase_set(a.oya);
    this.naki_count = 0;
    this.bakaze = a.bakaze;
    this.kyoku = a.kyoku;
    this.honba = a.honba;
    this.doras = [a.dora_marker];
    this.reached_player = false;
    _ref1 = a.tehais;
    _results = [];
    for (n = _j = 0, _len1 = _ref1.length; _j < _len1; n = ++_j) {
      i = _ref1[n];
      _results.push((function() {
        var _k, _len2, _results1;
        _results1 = [];
        for (_k = 0, _len2 = i.length; _k < _len2; _k++) {
          j = i[_k];
          _results1.push(this.players[n].push_tehai(j));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Stage.prototype.next_phase = function() {
    return this.phase_set(this.phase + 1);
  };

  Stage.prototype.end_kyoku = function(end_reason) {
    var flag, i, sum, ten, _i, _j, _len, _len1, _ref, _ref1;
    this.end_reason_settigs || (this.end_reason_settigs = {
      0: ["hora", "nagasimangan"],
      1: ["ryukyoku"]
    });
    switch (end_reason.type) {
      case "hora":
        if (end_reason.actor.is_oya()) {
          return this.honba++;
        } else {
          return this.next_kyoku();
        }
        break;
      case "ryukyoku":
        sum = 0;
        flag = false;
        _ref = this.players;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          if (i.tenpai()) {
            sum++;
          }
        }
        ten = [[0, 0], [3000, 1000], [1500, 1500], [1000, 3000], [0, 0]];
        _ref1 = this.players;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          i = _ref1[_j];
          if (i.tenpai()) {
            i.score += ten[sum][0];
          } else {
            i.score -= ten[sum][1];
          }
          if (i.is_oya()) {
            flag = i.tenpai();
          }
        }
        if (flag) {
          return this.honba++;
        } else {
          return this.next_kyoku();
        }
    }
  };

  Stage.prototype.agari = function(a) {
    var agari, b, i, _i, _len, _results;
    agari = a.actor.get_agari();
    if (a.actor === a.target) {
      b = this.players.filter(function(i) {
        return i !== a.actor;
      });
      _results = [];
      for (_i = 0, _len = b.length; _i < _len; _i++) {
        i = b[_i];
        if (i.is_oya()) {
          i.score -= agari.scores[1];
          _results.push(a.actor.score += agari.scores[1]);
        } else {
          i.score -= agari.scores[0];
          _results.push(a.actor.score += agari.scores[0]);
        }
      }
      return _results;
    } else {
      a.target.score -= agari.score;
      a.actor.score += agari.score;
      if (this.kyotaku !== 0) {
        a.actor.score += this.kyotaku * 1000;
        return this.kyotaku = 0;
      }
    }
  };

  Stage.prototype.phase_set = function(a) {
    this.phase = a % 4;
    return this.now_player = this.players[this.phase];
  };

  Stage.prototype.get_titya = function() {
    return this.players[this.titya];
  };

  Stage.prototype.next_kyoku = function() {
    var i, _i, _len, _ref;
    this.honba = 0;
    this.kyoku++;
    /*if @kyoku>5
      @kyoku=1
      @bakaze++
      if @bakaze>4
        @players = []
        for i in [0..3]
          if i == 0
            @players.push(new MyPlayer(i,i))
          else
            @players.push(new NPC(i,i))
    
        @kyoku=1
        @titya=0
        @oya=@titya
        @honba=0
        @bakaze=0
        @kyotaku=0
        return
    */

    _ref = this.players;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      i.kaze = (i.kaze + 1) % 4;
    }
    return this.oya = (this.oya + 1) % 4;
  };

  return Stage;

})(ModelBase);

Yama = (function() {

  function Yama() {
    var _i, _j, _k, _l, _results, _results1, _results2, _results3;
    this.a = (function() {
      _results3 = [];
      for (_l = 0; _l <= 33; _l++){ _results3.push(_l); }
      return _results3;
    }).apply(this).concat((function() {
      _results = [];
      for (_i = 0; _i <= 33; _i++){ _results.push(_i); }
      return _results;
    }).apply(this), (function() {
      _results1 = [];
      for (_j = 0; _j <= 33; _j++){ _results1.push(_j); }
      return _results1;
    }).apply(this), (function() {
      _results2 = [];
      for (_k = 0; _k <= 33; _k++){ _results2.push(_k); }
      return _results2;
    }).apply(this));
    this.count2 = 0;
  }

  Yama.prototype.shift = function() {
    return this.a.shift();
  };

  Yama.prototype.unshift = function() {
    return this.a.unshift();
  };

  Yama.prototype.get = function() {
    return this.a;
  };

  Yama.prototype.shuffle = function() {
    return this.a = this.a.shuffle();
  };

  Yama.prototype.length = function() {
    return this.a.length;
  };

  Yama.prototype.pop_wanpai = function() {
    var w;
    w = this.a.slice(124, 132);
    this.a.splice(124, 14);
    return w;
  };

  Yama.prototype.tsumikomi = function(pais) {
    var i, _i, _j, _len, _len1, _results;
    for (_i = 0, _len = pais.length; _i < _len; _i++) {
      i = pais[_i];
      this.a.splice(this.a.indexOf(i), 1);
    }
    _results = [];
    for (_j = 0, _len1 = pais.length; _j < _len1; _j++) {
      i = pais[_j];
      _results.push(this.a.unshift(i));
    }
    return _results;
  };

  return Yama;

})();

MJState = (function() {

  function MJState(player, stage) {
    this.player = player;
    this.stage = stage;
  }

  MJState.prototype.doras = function() {
    if (!this.player.reach) {
      return this.stage.doras;
    } else {
      return this.stage.doras.concat(this.stage.uradoras);
    }
  };

  MJState.prototype.dora_count = function() {
    return 0;
  };

  MJState.prototype.honba = function() {
    return this.stage.honba;
  };

  MJState.prototype.reachbou = function() {
    return this.stage.reachbou.reduce(function(x, y) {
      return x + y;
    });
  };

  MJState.prototype.yakuhai = function(h) {
    return (30 < h && h < 34) || this.jikaze(h) || this.bakaze(h);
  };

  MJState.prototype.jikaze = function(h) {
    return h === 27 + this.player.kaze;
  };

  MJState.prototype.bakaze = function(h) {
    return h === 27 + this.stage.bakaze;
  };

  MJState.prototype.get_yama_length = function() {
    return this.stage.yama.length();
  };

  MJState.prototype.menzen = function() {
    return this.player.menzen;
  };

  MJState.prototype.tsumo = function() {
    return this.player.tsumohai;
  };

  MJState.prototype.reach = function() {
    return this.player.reach;
  };

  MJState.prototype.reach_count = function() {
    return this.player.reach_count;
  };

  MJState.prototype.is_oya = function() {
    return this.player.is_oya();
  };

  MJState.prototype.is_doublereach = function() {
    return this.stage.naki_count === 0 && this.player.kawa.length === 0;
  };

  MJState.prototype.is_ippatsu = function() {
    return this.player.reach_kawa_count === 0 && this.player.reach_naki_count === this.stage.naki_count;
  };

  return MJState;

})();

Player = (function(_super) {

  __extends(Player, _super);

  function Player(n, k) {
    Player.__super__.constructor.call(this);
    this.number = n;
    this.kaze = k;
    this.score = 25000;
    this.set_kyoku();
  }

  Player.prototype.set_action = function(a) {
    this.action = a;
    return this.last_action = a;
  };

  Player.prototype.pop_action = function() {
    var a;
    a = this.action;
    this.set_action(false);
    return a;
  };

  Player.prototype.set_kyoku = function() {
    this.set_action(false);
    this.reach = false;
    this.reach_kawa_count = 0;
    this.reach_naki_count = 0;
    this.menzen = true;
    this.tsumohai = null;
    this.tehai = [];
    return this.kawa = [];
  };

  Player.prototype.push_tehai = function(h) {
    return this.tehai.push(h);
  };

  Player.prototype.clear_tehai = function() {};

  Player.prototype.push_kawa = function(h) {
    return this.kawa.push(h);
  };

  Player.prototype.pop_kawa = function() {};

  Player.prototype.tsumo = function(a) {
    this.push_tehai(a.pai);
    return this.tsumohai = a.pai;
  };

  Player.prototype.dahai = function(a) {
    this.tehai.splice(this.tehai.indexOf(a.pai), 1);
    this.kawa.push(a.pai);
    this.tsumohai = false;
    if (this.reach) {
      return this.reach_kawa_count++;
    }
  };

  Player.prototype.reach_accepted = function(a) {
    return this.reach = true;
  };

  Player.prototype.ask = function(a) {
    this.target_pai = a.pai;
    return this.target_player = a.actor;
  };

  Player.prototype.pon = function(a) {
    return this.menzen = false;
  };

  Player.prototype.chi = function(a) {
    return this.menzen = false;
  };

  Player.prototype.hora = function(a) {
    var i, _i, _len, _ref, _results;
    if (a.hasOwnProperty("hora_tehais")) {
      this.clear_tehai();
      _ref = a.hora_tehais;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(this.push_tehai(i));
      }
      return _results;
    }
  };

  Player.prototype.kan = function(a) {};

  Player.prototype.daiminkan = function(a) {
    return this.menzen = false;
  };

  Player.prototype.kakan = function(a) {};

  Player.prototype.is_oya = function() {
    return this.kaze === 0;
  };

  Player.prototype.get_agari = function() {
    return null;
  };

  Player.prototype.can_agari = function() {
    return false;
  };

  Player.prototype.can_ron = function(h) {
    return false;
  };

  Player.prototype.can_pon = function(h) {
    return false;
  };

  Player.prototype.can_chi = function(h) {
    return false;
  };

  Player.prototype.can_kan = function(h) {
    return false;
  };

  Player.prototype.can_reach = function() {
    return false;
  };

  Player.prototype.tenpai = function() {
    return false;
  };

  Player.prototype.get_distance = function(player) {
    var a;
    a = this.number - player.number;
    if (a > 0) {
      return a;
    } else {
      return a + 4;
    }
    return 0;
  };

  return Player;

})(ModelBase);

Player1 = (function(_super) {

  __extends(Player1, _super);

  function Player1() {
    return Player1.__super__.constructor.apply(this, arguments);
  }

  Player1.prototype.push_tehai = function(pai) {
    Player1.__super__.push_tehai.apply(this, arguments);
    return this.checker.push_tehai(pai);
  };

  Player1.prototype.clear_tehai = function() {
    return this.checker.clear_tehai();
  };

  Player1.prototype.tsumo = function(a) {
    this.push_tehai(a.pai);
    this.tsumohai = a.pai;
    return this.checker.check_agari();
  };

  Player1.prototype.dahai = function(a) {
    Player1.__super__.dahai.apply(this, arguments);
    return this.checker.remove(a.pai);
  };

  Player1.prototype.get_agari = function() {
    return this.checker.get_actually_score();
  };

  Player1.prototype.can_agari = function() {
    return this.checker.can_agari();
  };

  Player1.prototype.can_ron = function() {
    var _ref;
    this.checker.check_agari();
    if (_ref = this.target_pai, __indexOf.call(this.checker.machis.map(function(i) {
      return i[0];
    }), _ref) >= 0) {
      return this.checker.machis.map(function(i) {
        return i[1];
      });
    }
  };

  Player1.prototype.can_pon = function() {
    if (this.checker.can_pon(this.target_pai) && !this.reach) {
      return [this.target_pai];
    }
  };

  Player1.prototype.can_chi = function() {
    if (this.get_distance(this.target_player) === 1 && !this.reach) {
      return this.checker.can_chi(this.target_pai);
    }
  };

  Player1.prototype.can_reach = function() {
    if (this.checker.machis.length !== 0 && this.menzen && !this.reach) {
      return this.checker.machis.map(function(i) {
        return i[1];
      });
    }
  };

  Player1.prototype.hora = function(a) {
    Player1.__super__.hora.apply(this, arguments);
    if (a.target !== this) {
      this.checker.push_tehai(a.pai);
      return this.checker.check_agari();
    }
  };

  Player1.prototype.tenpai = function() {
    return this.checker.machis.length !== 0;
  };

  Player1.prototype.pon = function(a) {
    Player1.__super__.pon.apply(this, arguments);
    return this.checker.pon(a.pai, a.consumed);
  };

  Player1.prototype.chi = function(a) {
    Player1.__super__.chi.apply(this, arguments);
    return this.checker.chi(a.pai, a.consumed);
  };

  Player1.prototype.kan = function(a) {
    Player1.__super__.kan.apply(this, arguments);
    return this.checker.kan(a.pai, a.consumed);
  };

  Player1.prototype.daiminkan = function(a) {
    Player1.__super__.daiminkan.apply(this, arguments);
    return this.checker.daiminkan(a.pai, a.consumed);
  };

  return Player1;

})(Player);

MyPlayer = (function(_super) {

  __extends(MyPlayer, _super);

  function MyPlayer() {
    return MyPlayer.__super__.constructor.apply(this, arguments);
  }

  MyPlayer.prototype.ask = function(a) {
    MyPlayer.__super__.ask.apply(this, arguments);
    switch (a.type) {
      case "tsumo":
      case "reach":
      case "pon":
      case "chi":
      case "kan":
        if (a.actor === this) {
          return;
        }
        break;
      case "dahai":
        if (a.actor !== this) {
          return;
        }
    }
    return this.set_action({
      type: "none",
      actor: this
    });
  };

  MyPlayer.prototype.set_action = function(a) {
    MyPlayer.__super__.set_action.apply(this, arguments);
    if (a) {
      return this.notify({
        type: "selected",
        action: a,
        actor: this
      });
    }
  };

  return MyPlayer;

})(Player1);

NPC = (function(_super) {

  __extends(NPC, _super);

  function NPC() {
    return NPC.__super__.constructor.apply(this, arguments);
  }

  NPC.prototype.ask = function(a) {
    NPC.__super__.ask.apply(this, arguments);
    if (!(a.type === "tsumo" && a.actor === this)) {
      return this.set_action({
        type: "none",
        actor: this
      });
    }
  };

  NPC.prototype.tsumo = function(a) {
    NPC.__super__.tsumo.apply(this, arguments);
    return this.set_action({
      type: "dahai",
      pai: a.pai,
      index: 13,
      actor: this
    });
  };

  return NPC;

})(Player1);

Plain = (function(_super) {

  __extends(Plain, _super);

  function Plain() {
    return Plain.__super__.constructor.apply(this, arguments);
  }

  return Plain;

})(Player1);

ActionEncoder = (function() {

  function ActionEncoder() {}

  ActionEncoder.prototype.id = 0;

  ActionEncoder.prototype.kaze_index = {
    E: 0,
    S: 1,
    W: 2,
    N: 3
  };

  ActionEncoder.prototype.index_kaze = {
    0: "E",
    1: "S",
    2: "W",
    3: "N"
  };

  ActionEncoder.prototype.pai_strs = ["1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s", "E", "S", "W", "N", "P", "F", "C"];

  ActionEncoder.prototype.json_to_action = function(a) {
    var arr, i, tehai, _i, _len, _ref,
      _this = this;
    if (a.hasOwnProperty("actor")) {
      a.actor = this.players[this.id_to_index(a.actor)];
    }
    if (a.hasOwnProperty("oya")) {
      a.oya = this.id_to_index(a.oya);
    }
    if (a.hasOwnProperty("target")) {
      a.target = this.players[this.id_to_index(a.target)];
    }
    if (a.pai) {
      a.pai = this.toval(a.pai);
    }
    if (a.tehais) {
      tehai = [];
      _ref = a.tehais;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        arr = _ref[i];
        tehai[this.id_to_index(i)] = arr.map(function(i) {
          return _this.toval(i);
        });
      }
      a.tehais = tehai;
    }
    if (a.consumed) {
      a.consumed = a.consumed.map(function(i) {
        return _this.toval(i);
      });
    }
    if (a.hora_tehais) {
      a.hora_tehais = a.hora_tehais.map(function(i) {
        return _this.toval(i);
      });
    }
    if (a.bakaze) {
      a.bakaze = this.kaze_index[a.bakaze];
    }
    if (a.dora_marker) {
      a.dora_marker = this.toval(a.dora_marker);
    }
    return a;
  };

  ActionEncoder.prototype.toval = function(a) {
    a = this.pai_strs.indexOf(a);
    if (a === -1) {
      return 0;
    } else {
      return a;
    }
  };

  ActionEncoder.prototype.tostr = function(a) {
    return this.pai_strs[a];
  };

  ActionEncoder.prototype.action_to_json = function(action) {
    var a, arr, c, i, j, tehai, _i, _j, _len, _len1, _ref,
      _this = this;
    a = {};
    for (i in action) {
      j = action[i];
      a[i] = j;
    }
    if (a.hasOwnProperty("actor")) {
      a.actor = this.index_to_id(a.actor.number);
    }
    if (a.hasOwnProperty("target")) {
      a.target = this.index_to_id(a.target.number);
    }
    if (a.hasOwnProperty("oya")) {
      a.oya = this.index_to_id(a.oya);
    }
    if (a.hasOwnProperty("pai")) {
      a.pai = this.tostr(a.pai);
    }
    if (a.consumed) {
      c = a.consumed;
      a.consumed = [];
      for (_i = 0, _len = c.length; _i < _len; _i++) {
        i = c[_i];
        a.consumed.push(this.tostr(i));
      }
    }
    if (a.hasOwnProperty("bakaze")) {
      a.bakaze = this.index_kaze[a.bakaze];
    }
    if (a.hasOwnProperty("dora_marker")) {
      a.dora_marker = this.tostr(a.dora_marker);
    }
    if (a.type === "dahai") {
      a.tsumogiri = false;
    }
    if (a.hasOwnProperty("tehais")) {
      tehai = [];
      _ref = a.tehais;
      for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
        arr = _ref[i];
        tehai[this.index_to_id(i)] = arr.map(function(p) {
          return _this.tostr(p);
        });
      }
      a.tehais = tehai;
    }
    return a;
  };

  ActionEncoder.prototype.id_to_index = function(a) {
    return (a + (4 - this.id)) % 4;
  };

  ActionEncoder.prototype.index_to_id = function(a) {
    return (a + this.id) % 4;
  };

  return ActionEncoder;

})();

ServerManager = (function() {

  function ServerManager() {
    this.games = [];
  }

  ServerManager.prototype.onconnect = function(socket) {
    if (this.games.length === 0 || this.games[this.games.length - 1].is_playing()) {
      this.games.push(new ServerController);
    }
    return this.games[games.length - 1].onconnect(socket);
  };

  return ServerManager;

})();

ServerController = (function(_super) {

  __extends(ServerController, _super);

  function ServerController() {
    var i, _i, _len, _ref,
      _this = this;
    this.stage = new Stage;
    this.players = this.stage.players;
    _ref = ["tsumo", "dahai", "reach", "pon", "chi", "kan", "start_kyoku", "reach_accepted", "hora", "ryukyoku", "end_kyoku", "none"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      this.stage.add_listener(i, function(a) {
        return _this.send(a);
      });
    }
    this.p_sockets = [];
    this.playing_flag = false;
    this.end_flag = false;
  }

  ServerController.prototype.is_playing = function() {
    return this.playing_flag;
  };

  ServerController.prototype.is_end = function() {
    return this.end_flag;
  };

  ServerController.prototype.onconnect = function(socket) {
    var _this = this;
    return socket.on("join", function(join_message) {
      var i, _i;
      _this.p_sockets.push(socket);
      socket.on("disconnect", function() {
        return _this.p_sockets.splice(_this.p_sockets.indexOf(socket));
      });
      socket.on('mj_action', function(a) {
        return _this.receive(socket, a);
      });
      if (_this.p_sockets.length >= 4) {
        _this.playing_flag = true;
        for (i = _i = 0; _i < 4; i = ++_i) {
          _this.p_sockets[i].emit("mj_action", {
            type: "start_game",
            id: i,
            names: [0, 1, 2, 3]
          });
        }
        return setInterval(function() {
          return _this.stage.update();
        }, 100);
      }
    });
  };

  ServerController.prototype.receive = function(socket, mes) {
    var a, n;
    n = this.p_sockets.indexOf(socket);
    console.log("receive", n, mes);
    a = this.json_to_action(mes);
    return this.players[n].set_action(a);
  };

  ServerController.prototype.send = function(a) {
    var i, mes, _i, _len, _ref, _results;
    mes = this.action_to_json(a);
    console.log("send", mes);
    _ref = this.p_sockets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(i.emit('mj_action', mes));
    }
    return _results;
  };

  return ServerController;

})(ActionEncoder);

CliantController = (function(_super) {

  __extends(CliantController, _super);

  function CliantController(socket) {
    var _this = this;
    this.stage = new CliantStage;
    this.players = this.stage.players;
    this.my_actor = this.stage.players[0];
    this.my_actor.add_listener("selected", function(a) {
      return _this.send(a.action);
    });
    this.socket = socket;
    this.socket.on('mj_action', function(a) {
      return _this.receive(_this.json_to_action(a));
    });
    alert("join");
    this.socket.emit("join", this.action_to_json({
      type: "join",
      name: "wistery_k",
      room: "default"
    }));
    window.onload = function() {
      return new MyGame(_this.stage);
    };
  }

  CliantController.prototype.receive = function(a) {
    var i, tmp, _i, _len, _ref;
    if (a.type === "start_game") {
      this.id = a.id;
      tmp = this.id;
      _ref = this.stage.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        i.kaze = (tmp++) % 4;
      }
    }
    return this.stage.act(a);
  };

  CliantController.prototype.send = function(a) {
    console.log("send", a);
    return this.socket.emit('mj_action', this.action_to_json(a));
  };

  return CliantController;

})(ActionEncoder);

CliantStage = (function(_super) {

  __extends(CliantStage, _super);

  function CliantStage() {
    CliantStage.__super__.constructor.apply(this, arguments);
    this.update = function() {
      return false;
    };
  }

  return CliantStage;

})(Stage);

exports.ServerController=ServerController;

