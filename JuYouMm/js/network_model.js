// Generated by CoffeeScript 1.6.2
var ActionEncoder, CliantController, CliantStage, ServerController, ServerManager, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

ActionEncoder = (function() {
  function ActionEncoder() {}

  ActionEncoder.prototype.id = 0;

  ActionEncoder.prototype.kaze_index = {
    E: 0,
    S: 1,
    W: 2,
    N: 3
  };

  ActionEncoder.prototype.index_kaze = {
    0: "E",
    1: "S",
    2: "W",
    3: "N"
  };

  ActionEncoder.prototype.pai_strs = ["1m", "2m", "3m", "4m", "5m", "6m", "7m", "8m", "9m", "1p", "2p", "3p", "4p", "5p", "6p", "7p", "8p", "9p", "1s", "2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s", "E", "S", "W", "N", "P", "F", "C", "5mr", "5pr", "5sr"];

  ActionEncoder.prototype.json_to_action = function(a) {
    var arr, i, tehai, _i, _len, _ref,
      _this = this;

    //a = JSON.parse(a);
    if (a.hasOwnProperty("actor")) {
      a.actor = this.id_to_index(a.actor);
    }
    if (a.hasOwnProperty("oya")) {
      a.oya = this.id_to_index(a.oya);
    }
    if (a.hasOwnProperty("target")) {
      a.target = this.id_to_index(a.target);
    }
    if (a.pai) {
      a.pai = this.toval(a.pai);
    }
    if (a.tehais) {
      tehai = [];
      _ref = a.tehais;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        arr = _ref[i];
        tehai[this.id_to_index(i)] = arr.map(function(i) {
          return _this.toval(i);
        });
      }
      a.tehais = tehai;
    }
    if (a.consumed) {
      a.consumed = a.consumed.map(function(i) {
        return _this.toval(i);
      });
    }
    if (a.hora_tehais) {
      a.hora_tehais = a.hora_tehais.map(function(i) {
        return _this.toval(i);
      });
    }
    if (a.bakaze) {
      a.bakaze = this.kaze_index[a.bakaze];
    }
    if (a.dora_marker) {
      a.dora_marker = this.toval(a.dora_marker);
    }
    return a;
  };

  ActionEncoder.prototype.toval = function(a) {
    a = this.pai_strs.indexOf(a);
    if (a === -1) {
      return 0;
    } else {
      return a;
    }
  };

  ActionEncoder.prototype.tostr = function(a) {
    return this.pai_strs[a];
  };

  ActionEncoder.prototype.action_to_json = function(action) {
    var a, arr, c, i, j, tehai, _i, _j, _len, _len1, _ref,
      _this = this;

    a = {};
    for (i in action) {
      j = action[i];
      a[i] = j;
    }
    if (a.hasOwnProperty("actor")) {
      a.actor = this.index_to_id(a.actor);
    }
    if (a.hasOwnProperty("target")) {
      a.target = this.index_to_id(a.target);
    }
    if (a.hasOwnProperty("oya")) {
      a.oya = this.index_to_id(a.oya);
    }
    if (a.hasOwnProperty("pai")) {
      a.pai = this.tostr(a.pai);
    }
    if (a.consumed) {
      c = a.consumed;
      a.consumed = [];
      for (_i = 0, _len = c.length; _i < _len; _i++) {
        i = c[_i];
        a.consumed.push(this.tostr(i));
      }
    }
    if (a.hasOwnProperty("bakaze")) {
      a.bakaze = this.index_kaze[a.bakaze];
    }
    if (a.hasOwnProperty("dora_marker")) {
      a.dora_marker = this.tostr(a.dora_marker);
    }
    if (a.type === "dahai") {
      a.tsumogiri = true;
    }
    if (a.hasOwnProperty("tehais")) {
      tehai = [];
      _ref = a.tehais;
      for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
        arr = _ref[i];
        tehai[this.index_to_id(i)] = arr.map(function(p) {
          return _this.tostr(p);
        });
      }
      a.tehais = tehai;
    }
    return a;//JSON.stringify(a);
  };

  ActionEncoder.prototype.id_to_index = function(a) {
    return (a + (4 - this.id)) % 4;
  };

  ActionEncoder.prototype.index_to_id = function(a) {
    return (a + this.id) % 4;
  };

  return ActionEncoder;

})();

ServerManager = (function() {
  function ServerManager() {
    this.games = [];
  }

  ServerManager.prototype.onconnect = function(socket) {
    if (this.games.length === 0 || this.games[this.games.length - 1].is_playing()) {
      this.games.push(new ServerController);
    }
    return this.games[games.length - 1].onconnect(socket);
  };

  return ServerManager;

})();

ServerController = (function(_super) {
  __extends(ServerController, _super);

  function ServerController() {
    var i, _i, _len, _ref,
      _this = this;

    this.stage = new Stage;
    this.players = this.stage.players;
    _ref = ["tsumo", "dahai", "reach", "pon", "chi", "kan", "start_kyoku", "reach_accepted", "hora", "ryukyoku", "end_kyoku", "end_game", "none"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      this.stage.add_listener(i, function(a) {
        return _this.send(a);
      });
    }
    this.p_sockets = [];
    this.playing_flag = false;
    this.end_flag = false;
  }

  ServerController.prototype.is_playing = function() {
    return this.playing_flag;
  };

  ServerController.prototype.is_end = function() {
    return this.end_flag;
  };

  ServerController.prototype.onconnect = function(socket) {
    var _this = this;

    return socket.on("join", function(join_message) {
      var i, _i;

      _this.p_sockets.push(socket);
      socket.on("disconnect", function() {
        return _this.p_sockets.splice(_this.p_sockets.indexOf(socket));
      });
      socket.on('mj_action', function(a) {
        return _this.receive(socket, a);
      });
      if (_this.p_sockets.length >= 4) {
        _this.playing_flag = true;
        for (i = _i = 0; _i < 4; i = ++_i) {
          _this.p_sockets[i].emit("mj_action", {
            type: "start_game",
            id: i,
            names: [0, 1, 2, 3]
          });
        }
        return setInterval(function() {
          return _this.stage.update();
        }, 100);
      }
    });
  };

  ServerController.prototype.receive = function(socket, mes) {
    var a, n;

    n = this.p_sockets.indexOf(socket);
    console.log("receive", n, mes);
    a = this.json_to_action(mes);
    return this.players[n].set_action(a);
  };

  ServerController.prototype.send = function(a) {
    var i, mes, _i, _len, _ref, _results;

    mes = this.action_to_json(a);
    console.log("send", mes);
    _ref = this.p_sockets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _results.push(i.emit('mj_action', mes));
    }
    return _results;
  };

  return ServerController;

})(ActionEncoder);

CliantController = (function(_super) {
  __extends(CliantController, _super);

  function CliantController(socket) {
    var _this = this;

    this.stage = new CliantStage;
    this.players = this.stage.players;
    this.my_actor = this.stage.players[0];
    this.my_actor.add_listener("selected", function(a) {
      return _this.send(a.action);
    });
    this.socket = socket;
    this.socket.on('mj_action', function(a) {
      return _this.receive(_this.json_to_action(a));
    });
    this.socket.on('connect' , function() {
        console.log("connect");
        return _this.socket.emit('join', _this.action_to_json({
            type: "join",
            name: "dwfegewg",
            room: "default"
        }));
    });
    window.onload = function() {
      return new MyGame(_this.stage);
    };
  }

  CliantController.prototype.receive = function(a) {
    var i, titya, _i;

    console.log("receive", a);
    if (a.type === "start_game") {
      this.id = a.id;
      titya = this.id_to_index(0);
      for (i = _i = 0; _i < 4; i = ++_i) {
        this.players[(titya + i) % 4].kaze = i;
      }
    }
    return this.stage.act(a);
  };

  CliantController.prototype.send = function (a) {
      console.log("send", a);
      return this.socket.emit('mj_action', this.action_to_json(a));
  };

  return CliantController;

})(ActionEncoder);

CliantStage = (function(_super) {
  __extends(CliantStage, _super);

  function CliantStage() {
    CliantStage.__super__.constructor.apply(this, arguments);
    this.update = function() {
      return false;
    };
  }

  return CliantStage;

})(Stage);

exports = {
  ServerController: ServerController
};
