// Generated by CoffeeScript 1.6.2
/*Copyright (c) 2012 hoo89 (hoo89@me.com) Licensed MIT
*/


function generateCombinations(array, r, callback) {
    function equal(a, b) {
        for (var i = 0; i < a.length; i++) {
            if (a[i] != b[i]) return false;
        }
        return true;
    }
    function values(i, a) {
        var ret = [];
        for (var j = 0; j < i.length; j++) ret.push(a[i[j]]);
        return ret;
    }
    var n = array.length;
    var indices = [];
    for (var i = 0; i < r; i++) indices.push(i);
    var final = [];
    for (var i = n - r; i < n; i++) final.push(i);
    while (!equal(indices, final)) {
        callback(values(indices, array));
        var i = r - 1;
        while (indices[i] == n - r + i) i -= 1;
        indices[i] += 1;
        for (var j = i + 1; j < r; j++) indices[j] = indices[i] + j - i;
    }
    callback(values(indices, array));
}
/*
var a=["aaa","bbb","ccc","ddd"];
generateCombinations(a,2,function(elem){
    for(var i=0;i<elem.length;i++){
      console.log(elem[i]);
    }
    console.log("|");
  }
)*/
Array.prototype.shuffle = function() {
    var i = this.length;
    while(i){
        var j = Math.floor(Math.random()*i);
        var t = this[--i];
        this[i] = this[j];
        this[j] = t;
    }
    return this;
};
Array.prototype.uniq = function(){
    var o = new Object;
    var result = new Array;
    for(var i = 0, l = this.length; i < l; i++){
        var e = this[i];
        if(!(e in o) || o[e].indexOf(typeof this[i]) == -1){
            o[e] += typeof e;
            result.push(e);
        }
    }
    
    return result;
};
;
var Agari, DummyMJPlayerStates, HaiChecker, HaiCounter, MJ, Mentsu, Yaku, YakuCheck, count_hai, get_machi, pop_mentsu, search_heads, search_koutsu, search_syuntsu, search_tartsu,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MJ = (function() {
  function MJ() {}

  MJ.jihai = function(p) {
    return p > 26;
  };

  MJ.kind = function(p) {
    return Math.floor(p / 9);
  };

  MJ.number = function(p) {
    return Math.floor(p % 9);
  };

  MJ.count_yaochu = function(arr) {
    var a, i, _i, _len;

    a = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      i = arr[_i];
      if (i === 0 || i === 8 || i === 9 || i === 17 || i === 18 || i === 26 || (26 < i && i < 34)) {
        a++;
      }
    }
    return a;
  };

  MJ.sangen = function(p) {
    return p === 31 || p === 32 || p === 33;
  };

  MJ.count_jihai = function(arr) {
    var a, i, _i, _len;

    a = 0;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      i = arr[_i];
      if (MJ.jihai(i)) {
        a++;
      }
    }
    return a;
  };

  MJ.green = function(p) {
    return p === 19 || p === 20 || p === 21 || p === 23 || p === 25 || p === 32;
  };

  return MJ;

})();

HaiCounter = (function() {
  function HaiCounter() {
    this.p = [];
    this.nakis = [];
  }

  HaiCounter.prototype.count = function(pai) {
    var c, i, _i, _len, _ref;

    c = 0;
    _ref = this.p;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i === pai) {
        c += 1;
      }
    }
    return c;
  };

  HaiCounter.prototype.heads = function() {
    var a, i, _i, _len, _ref;

    a = [];
    _ref = this.p.uniq();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (this.count(i) > 1) {
        a.push([i, i]);
      }
    }
    return a;
  };

  HaiCounter.prototype.tartsu = function() {
    var a, p, q, _i, _j, _len, _len1, _ref, _ref1;

    a = [];
    _ref = this.p;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      _ref1 = this.p;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        q = _ref1[_j];
        if (!MJ.jihai(p) && !MJ.jihai(q) && MJ.kind(p) === MJ.kind(q)) {
          if (p < q && q - p < 3) {
            a.push([p, q]);
          }
        }
      }
    }
    return a;
  };

  HaiCounter.prototype.count_kinds = function() {
    return this.p.uniq().length;
  };

  HaiCounter.prototype.has_koutsu = function(hai) {
    return this.count(hai) > 2;
  };

  HaiCounter.prototype.koutsu = function() {
    var a, b, i, _i, _len, _ref;

    a = [];
    _ref = this.p.uniq();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (this.has_koutsu(i)) {
        b = [i, i, i];
        b.kind = 2;
        a.push(b);
      }
    }
    return a;
  };

  HaiCounter.prototype.syuntsu = function() {
    var a, b, i, _i, _len, _ref;

    a = [];
    _ref = this.p;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (MJ.jihai(i) || i % 9 > 6) {
        continue;
      }
      if (this.count(i + 1) > 0 && this.count(i + 2)) {
        b = [i, i + 1, i + 2];
        b.kind = 1;
        a.push(b);
      }
    }
    return a;
  };

  HaiCounter.prototype.add_naki = function(m) {
    var i, _i, _len;

    if (m.length === 4) {
      m.kan = true;
    }
    for (_i = 0, _len = m.length; _i < _len; _i++) {
      i = m[_i];
      this.p.splice(this.p.indexOf(i), 1);
    }
    return this.nakis.push(m);
  };

  return HaiCounter;

})();

count_hai = function(arr, pai) {
  var c, i, _i, _len;

  c = 0;
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    i = arr[_i];
    if (i === pai) {
      c += 1;
    }
  }
  return c;
};

search_heads = function(arr) {
  var a, b, i, _i, _len, _ref;

  a = [];
  _ref = arr.uniq();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    if (count_hai(arr, i) > 1) {
      b = [i, i];
      b.kind = 0;
      a.push(b);
    }
  }
  return a;
};

search_tartsu = function(arr) {
  var a, i, j, _i, _j, _len, _len1;

  a = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    i = arr[_i];
    for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
      j = arr[_j];
      if (!MJ.jihai(i) && !MJ.jihai(j) && MJ.kind(i) === MJ.kind(j)) {
        if (j > i && j - i < 3) {
          a.push([i, j]);
        }
      }
    }
  }
  return a;
};

search_koutsu = function(arr) {
  var a, b, i, _i, _len, _ref;

  a = [];
  _ref = arr.uniq();
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    if (count_hai(arr, i) > 2) {
      b = [i, i, i];
      b.kind = 2;
      a.push(b);
    }
  }
  return a;
};

search_syuntsu = function(arr) {
  var a, b, i, _i, _len;

  a = [];
  for (_i = 0, _len = arr.length; _i < _len; _i++) {
    i = arr[_i];
    if (MJ.jihai(i) || i % 9 > 6) {
      continue;
    }
    if (count_hai(arr, i + 1) > 0 && count_hai(arr, i + 2) > 0) {
      b = [i, i + 1, i + 2];
      b.kind = 1;
      a.push(b);
    }
  }
  return a;
};

pop_mentsu = function(arr1, arr2) {
  var i, _i, _len;

  for (_i = 0, _len = arr2.length; _i < _len; _i++) {
    i = arr2[_i];
    arr1.splice(arr1.indexOf(i), 1);
  }
  return arr1;
};

get_machi = function(m) {
  var a, b;

  if (m[0] < m[1]) {
    a = m[0];
    b = m[1];
  } else {
    a = m[1];
    b = m[0];
  }
  if (b - a === 1) {
    if (a % 9 === 0) {
      return [b + 1];
    } else if (b % 9 === 8) {
      return [a - 1];
    } else {
      return [a - 1, b + 1];
    }
  } else {
    return [a + 1];
  }
};

Mentsu = (function() {
  function Mentsu() {}

  return Mentsu;

})();

HaiChecker = (function() {
  function HaiChecker(state) {
    this.state = state;
    this.hais = new HaiCounter;
    this.agaris = [];
    this.machis = [];
    this.tehai = [];
    this.last_hai;
  }

  HaiChecker.prototype.can_pon = function(h) {
    if (this.hais.count(h) > 1) {
      return [h];
    }
  };

  HaiChecker.prototype.can_chi = function(h) {
    var can_chi_hais, i, _i, _len, _ref;

    if (MJ.jihai(h)) {
      return false;
    }
    can_chi_hais = [];
    _ref = this.hais.tartsu();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (MJ.kind(i[0]) !== MJ.kind(h)) {
        continue;
      }
      switch (i[1] - i[0]) {
        case 1:
          if (MJ.number(i[0]) === 0) {
            if (h - i[1] === 1) {
              can_chi_hais.push(i[0], i[1]);
            }
          } else if (MJ.number(i[1]) === 8) {
            if (i[0] - h === 1) {
              can_chi_hais.push(i[0], i[1]);
            }
          } else {
            if (h - i[1] === 1 || i[0] - h === 1) {
              can_chi_hais.push(i[0], i[1]);
            }
          }
          break;
        case 2:
          if (i[1] - h === 1 && h - i[0] === 1) {
            can_chi_hais.push(i[0], i[1]);
          }
      }
    }
    if (can_chi_hais.length === 0) {
      return false;
    } else {
      return can_chi_hais;
    }
  };

  HaiChecker.prototype.push_tehai = function(hai) {
    this.hais.p.push(hai);
    this.tehai.push(hai);
    return this.last_hai = hai;
  };

  HaiChecker.prototype.clear_tehai = function() {
    this.hais.p = [];
    return this.tehai = [];
  };

  HaiChecker.prototype.pon = function(p, con) {
    var m;

    this.push_tehai(p);
    m = [p].concat(con);
    m.fooroh = true;
    m.kind = 2;
    return this.hais.add_naki(m);
  };

  HaiChecker.prototype.chi = function(p, con) {
    var m;

    this.push_tehai(p);
    m = [p].concat(con);
    m.fooroh = true;
    m.kind = 1;
    return this.hais.add_naki(m);
  };

  HaiChecker.prototype.ankan = function(p, con) {
    this.push_tehai(p);
    return this.hais.add_naki([p].concat(con));
  };

  HaiChecker.prototype.daiminkan = function(p, con) {
    var m;

    this.push_tehai(p);
    m = [p].concat(con);
    m.fooroh = true;
    return this.hais.add_naki(m);
  };

  HaiChecker.prototype.kakan = function(p, con) {
    this.push_tehai(p);
    a.push(p);
    return a.kan = true;
  };

  HaiChecker.prototype.dahai = function(h) {
    this.hais.p.splice(h, 1);
    return this.tehai.splice(h, 1);
  };

  HaiChecker.prototype.remove_from_hais = function(h) {
    return this.hais.p.splice(this.hais.p.indexOf(h), 1);
  };

  HaiChecker.prototype.remove = function(h) {
    this.hais.p.splice(this.hais.p.indexOf(h), 1);
    return this.tehai.splice(this.tehai.indexOf(h), 1);
  };

  HaiChecker.prototype.can_agari = function() {
    return this.agaris.length !== 0;
  };

  HaiChecker.prototype.get_agari = function() {
    var i, max, result, s, _i, _len, _ref;

    max = 0;
    result = null;
    _ref = this.agaris;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      s = i.get_score();
      if (max < s.score) {
        max = s.score;
        result = s;
      }
    }
    return result;
  };

  HaiChecker.prototype.get_actually_score = function() {
    var a, honba, oya, score, tscore;

    a = this.get_agari();
    if (!a) {
      throw "can't agari";
    }
    score = a.score;
    tscore = [0, 0];
    oya = this.state.is_oya();
    honba = this.state.honba();
    if (oya) {
      score = Math.ceil(score * 1.5 / 100) * 100;
      tscore[0] = Math.ceil(score / 300) * 100 + 100 * honba;
      score += 300 * honba;
    } else {
      score = Math.ceil(score / 100) * 100;
      tscore[0] = Math.ceil(score / 400) * 100 + 100 * honba;
      tscore[1] = Math.ceil(score / 200) * 100 + 100 * honba;
      score += 300 * honba;
    }
    a.score = score;
    a.scores = tscore;
    return a;
  };

  HaiChecker.prototype.check_agari = function() {
    var a, aaaa, ag, count_back_hash, count_hash, h, hai, hai_count, heads, i, j, loop_flag, m, mens, mentsu_koho_torios, mentsu_kohos, nakis, t, tartsu, tmp, tmp1, tmp_tehai, torio, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _s, _t, _u;

    this.mentsus = [];
    nakis = this.hais.nakis;
    this.agaris.length = 0;
    this.machis.length = 0;
    tmp_tehai = this.hais.p.slice();
    heads = this.hais.heads();
    if (heads.length === 7) {
      this.agaris.push(new Agari(this.tehai, this.last_hai, heads, this.state));
    }
    mentsu_kohos = this.hais.koutsu().concat(this.hais.syuntsu());
    if (mentsu_kohos.length + nakis.length >= 3) {
      hai_count = {};
      for (_i = 0, _len = tmp_tehai.length; _i < _len; _i++) {
        i = tmp_tehai[_i];
        if (!hai_count[i]) {
          hai_count[i] = 1;
        } else {
          hai_count[i]++;
        }
      }
      mentsu_koho_torios = [];
      generateCombinations(mentsu_kohos, 3 - nakis.length, function(arr) {
        return mentsu_koho_torios.push(arr);
      });
      count_back_hash = {};
      for (i in count_hash) {
        j = count_hash[i];
        count_back_hash[i] = 0;
      }
      for (_j = 0, _len1 = mentsu_koho_torios.length; _j < _len1; _j++) {
        torio = mentsu_koho_torios[_j];
        loop_flag = true;
        count_hash = {};
        for (i in hai_count) {
          j = hai_count[i];
          count_hash[i] = j;
        }
        for (_k = 0, _len2 = torio.length; _k < _len2; _k++) {
          m = torio[_k];
          for (_l = 0, _len3 = m.length; _l < _len3; _l++) {
            hai = m[_l];
            if (count_hash[hai] === 0) {
              loop_flag = false;
              break;
            } else {
              count_hash[hai]--;
            }
          }
          if (!loop_flag) {
            break;
          }
        }
        if (loop_flag) {
          this.mentsus.push({
            others: []
          });
          this.mentsus[this.mentsus.length - 1].torio = torio;
          for (i in count_hash) {
            j = count_hash[i];
            for (t = _m = 0; 0 <= j ? _m < j : _m > j; t = 0 <= j ? ++_m : --_m) {
              this.mentsus[this.mentsus.length - 1].others.push(parseInt(i));
            }
          }
        }
      }
      if (this.mentsus.length !== 0) {
        _ref = this.mentsus;
        for (_n = 0, _len4 = _ref.length; _n < _len4; _n++) {
          i = _ref[_n];
          heads = search_heads(i.others);
          switch (heads.length) {
            case 0:
              mens = search_syuntsu(i.others).concat(search_koutsu(i.others));
              for (_o = 0, _len5 = mens.length; _o < _len5; _o++) {
                m = mens[_o];
                a = pop_mentsu(i.others.slice(), m);
                this.machis.push([a[0], a[1]]);
                if (a[1]) {
                  this.machis.push([a[1], a[0]]);
                }
              }
              break;
            case 1:
              pop_mentsu(i.others, heads[0]);
              mens = search_syuntsu(i.others).concat(search_koutsu(i.others));
              if (mens.length !== 0) {
                i.torio.push(mens[0]);
                ag = heads.concat(i.torio).concat(nakis);
                this.agaris.push(new Agari(this.tehai, this.last_hai, ag, this.state));
              } else {
                tartsu = search_tartsu(i.others);
                if (tartsu.length !== 0) {
                  for (_p = 0, _len6 = tartsu.length; _p < _len6; _p++) {
                    t = tartsu[_p];
                    _ref1 = get_machi(t);
                    for (_q = 0, _len7 = _ref1.length; _q < _len7; _q++) {
                      aaaa = _ref1[_q];
                      this.machis.push([aaaa, pop_mentsu(i.others.slice(), t)[0]]);
                    }
                  }
                }
              }
              break;
            case 2:
              for (_r = 0, _len8 = heads.length; _r < _len8; _r++) {
                h = heads[_r];
                tmp = i.others.slice();
                pop_mentsu(tmp, h);
                mens = search_syuntsu(tmp).concat(search_koutsu(tmp));
                if (mens.length !== 0) {
                  i.torio.push(mens[0]);
                  ag = [h].concat(i.torio).concat(nakis);
                  this.agaris.push(new Agari(this.tehai, this.last_hai, ag, this.state));
                } else {
                  tartsu = search_tartsu(tmp);
                  if (tartsu.length !== 0) {
                    for (_s = 0, _len9 = tartsu.length; _s < _len9; _s++) {
                      t = tartsu[_s];
                      _ref2 = get_machi(t);
                      for (_t = 0, _len10 = _ref2.length; _t < _len10; _t++) {
                        aaaa = _ref2[_t];
                        this.machis.push([aaaa, pop_mentsu(tmp.slice(), t)[0]]);
                      }
                    }
                  }
                }
              }
              tmp1 = i.others.slice();
              pop_mentsu(tmp1, heads[0]);
              pop_mentsu(tmp1, heads[1]);
              this.machis.push([heads[0][0], tmp1[0]]);
              if (heads[1][0]) {
                this.machis.push([heads[1][0], tmp1[0]]);
              }
          }
        }
      }
    }
    heads = this.hais.heads();
    if (heads.length === 6) {
      tmp = tmp_tehai.slice();
      for (_u = 0, _len11 = heads.length; _u < _len11; _u++) {
        i = heads[_u];
        pop_mentsu(tmp, i);
      }
      this.machis.push([tmp[0], tmp[1]]);
      if (tmp[1]) {
        this.machis.push([tmp[1], tmp[0]]);
      }
    }
    return this.machis = this.machis.uniq();
  };

  return HaiChecker;

})();

DummyMJPlayerStates = (function() {
  function DummyMJPlayerStates(a, b) {}

  DummyMJPlayerStates.prototype.doras = function() {
    return [];
  };

  DummyMJPlayerStates.prototype.yakuhai = function(h) {
    return false;
  };

  DummyMJPlayerStates.prototype.yakuhai = function(p) {
    return false;
  };

  DummyMJPlayerStates.prototype.jikaze = function(p) {
    return false;
  };

  DummyMJPlayerStates.prototype.bakaze = function(p) {
    return false;
  };

  DummyMJPlayerStates.prototype.get_yama_length = function() {
    return 30;
  };

  DummyMJPlayerStates.prototype.menzen = function() {
    return true;
  };

  DummyMJPlayerStates.prototype.tsumo = function() {
    return true;
  };

  DummyMJPlayerStates.prototype.reach = function() {
    return false;
  };

  DummyMJPlayerStates.prototype.reach_count = function() {
    return false;
  };

  return DummyMJPlayerStates;

})();

Yaku = (function() {
  function Yaku(name, fan) {
    this.name = name;
    this.fan = fan;
  }

  Yaku.prototype.yakuman = function() {
    return this.fan > 12;
  };

  return Yaku;

})();

YakuCheck = (function() {
  function YakuCheck() {}

  YakuCheck.prototype.tanyao = function() {
    if (MJ.count_yaochu(this.tehai) === 0) {
      this.yakus.push(new Yaku("タンヤオ", 1));
      return true;
    }
  };

  YakuCheck.prototype.mentsumo = function() {
    if (this.menzen && this.tsumo) {
      this.yakus.push(new Yaku("門前清自摸和", 1));
      return true;
    }
  };

  YakuCheck.prototype.reach = function() {
    if (this.state.reach()) {
      if (this.state.is_doublereach()) {
        this.yakus.push(new Yaku("ダブル立直", 2));
      } else {
        this.yakus.push(new Yaku("立直", 1));
      }
      if (this.state.is_ippatsu()) {
        this.yakus.push(new Yaku("一発", 1));
      }
      return true;
    }
  };

  YakuCheck.prototype.houtei = function() {
    if (this.state.get_yama_length() === 0) {
      if (this.tsumo) {
        this.yakus.push(new Yaku("海底摸月", 1));
      } else {
        this.yakus.push(new Yaku("河底撈魚", 1));
      }
      return true;
    }
  };

  YakuCheck.prototype.pinhu = function() {
    var i, _i, _len, _ref;

    _ref = this.mentsus.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (i.kind !== 1) {
        return false;
      }
    }
    if (this.state.yakuhai(this.mentsus[0][0])) {
      return false;
    }
    if (!this.menzen) {
      return false;
    }
    if (!this.get_machi()[3]) {
      return false;
    }
    this.yakus.push(new Yaku("平和", 1));
    return true;
  };

  YakuCheck.prototype.yakuhai = function() {
    var m, _i, _len, _ref, _results;

    _ref = this.mentsus;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2) {
        if (this.state.jikaze(m[0]) && this.state.bakaze(m[0])) {
          _results.push(this.yakus.push(new Yaku("役牌", 2)));
        } else if (this.state.yakuhai(m[0])) {
          _results.push(this.yakus.push(new Yaku("役牌", 1)));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  YakuCheck.prototype.epei = function() {
    if (this.mentsus.uniq().length === 4 && this.menzen) {
      return this.yakus.push(new Yaku("一盃口", 1));
    }
  };

  YakuCheck.prototype.ryanpei = function() {
    if (this.mentsus.uniq().length === 3 && this.menzen) {
      return this.yakus.push(new Yaku("二盃口", 3));
    }
  };

  YakuCheck.prototype.toitoi = function() {
    var m, _i, _len, _ref;

    _ref = this.mentsus.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind !== 2) {
        return;
      }
    }
    return this.yakus.push(new Yaku("対々和", 2));
  };

  YakuCheck.prototype.sanan = function() {
    var m, _i, _len, _ref, _results;

    this.anko_count = 0;
    _ref = this.mentsus;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 && !m.fooroh) {
        this.anko_count++;
      }
      if (this.anko_count > 3) {
        _results.push(this.yakus.push(new Yaku("三暗刻", 2)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  YakuCheck.prototype.doujyun = function() {
    var colors, flag, m, s, syuntsu, t, _i, _j, _k, _len, _len1, _len2, _ref;

    flag = false;
    syuntsu = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 1) {
        syuntsu.push(m);
      }
    }
    if (syuntsu.length >= 3) {
      for (_j = 0, _len1 = syuntsu.length; _j < _len1; _j++) {
        s = syuntsu[_j];
        colors = [];
        for (_k = 0, _len2 = syuntsu.length; _k < _len2; _k++) {
          t = syuntsu[_k];
          if (MJ.number(s[0]) === MJ.number(t[0])) {
            colors[MJ.kind(t[0])] = true;
          }
        }
        if (colors[0] && colors[1] && colors[2]) {
          flag = true;
        }
      }
      if (flag) {
        if (this.menzen) {
          return this.yakus.push(new Yaku("三色同順", 2));
        } else {
          return this.yakus.push(new Yaku("三色同順", 1));
        }
      }
    }
  };

  YakuCheck.prototype.doukou = function() {
    var colors, f, koutsu, m, s, t, _i, _j, _k, _len, _len1, _len2, _ref;

    f = false;
    koutsu = [];
    colors = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 || m.kind === 3) {
        koutsu.push(m);
      }
    }
    if (koutsu.length >= 3) {
      for (_j = 0, _len1 = koutsu.length; _j < _len1; _j++) {
        s = koutsu[_j];
        colors = [];
        for (_k = 0, _len2 = koutsu.length; _k < _len2; _k++) {
          t = koutsu[_k];
          if (MJ.number(s[0]) === MJ.number(t[0])) {
            colors[MJ.kind(t[0])] = true;
          }
        }
      }
      if (colors[0] && colors[1] && colors[2]) {
        return this.yakus.push(new Yaku("三色同刻", 2));
      }
    }
  };

  YakuCheck.prototype.ssangen = function() {
    var c, m, _i, _len, _ref;

    if (!MJ.sangen(this.mentsus[0][0])) {
      return;
    }
    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 && MJ.sangen(m[0])) {
        c++;
      }
    }
    if (c > 2) {
      return this.yakus.push(new Yaku("小三元", 2));
    }
  };

  YakuCheck.prototype.ittu = function() {
    var a, m, s, syuntsu, _i, _j, _len, _len1, _ref;

    syuntsu = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 1) {
        syuntsu.push(m);
      }
    }
    if (syuntsu.length >= 3) {
      a = [];
      for (_j = 0, _len1 = syuntsu.length; _j < _len1; _j++) {
        s = syuntsu[_j];
        a[s[0]] = 1;
      }
      if (a[0] && a[3] && a[6] || a[9] && a[12] && a[15] || a[18] && a[21] && a[24]) {
        if (this.menzen) {
          return this.yakus.push(new Yaku("一気通貫", 2));
        } else {
          return this.yakus.push(new Yaku("一気通貫", 1));
        }
      }
    }
  };

  YakuCheck.prototype.chanta = function() {
    var m, _i, _len, _ref;

    if (MJ.count_yaochu(this.tehai) === 14) {
      this.chinroh_flag = true;
      return this.yakus.push(new Yaku("混老頭", 2));
    } else {
      this.chinroh_flag = false;
      _ref = this.mentsus;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        this.jflag = true;
        if (MJ.count_yaochu(m) === 0) {
          return;
        }
        if (MJ.count_jihai(m) > 0) {
          this.jflag = false;
        }
      }
      if (this.jflag) {
        if (this.menzen) {
          return this.yakus.push(new Yaku("純チャン", 3));
        } else {
          return this.yakus.push(new Yaku("純チャン", 2));
        }
      } else {
        if (this.menzen) {
          return this.yaku.push(new Yaku("チャンタ", 2));
        } else {
          return this.yaku.push(new Yaku("チャンタ", 1));
        }
      }
    }
  };

  YakuCheck.prototype.honitsu = function() {
    var f, kind, p, _i, _len, _ref;

    kind = null;
    f = 0;
    _ref = this.tehai;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (MJ.jihai(p)) {
        f = 1;
      } else {
        if (kind) {
          if (kind !== MJ.kind(p)) {
            f = 2;
            break;
          }
        } else {
          kind = MJ.kind(p);
        }
      }
    }
    if (f === 0) {
      if (this.menzen) {
        return this.yakus.push(new Yaku("清一色", 6));
      } else {
        return this.yakus.push(new Yaku("清一色", 5));
      }
    } else if (f === 1) {
      if (this.menzen) {
        return this.yakus.push(new Yaku("混一色", 3));
      } else {
        return this.yakus.push(new Yaku("混一色", 2));
      }
    }
  };

  YakuCheck.prototype.sankan = function() {
    var c, m, _i, _len, _ref;

    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kan) {
        c++;
      }
    }
    if (c === 3) {
      return this.yakus.push(new Yaku("三槓子", 2));
    }
  };

  YakuCheck.prototype.suan = function() {
    var c, m, _i, _len, _ref;

    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kind === 2 && !m.fooroh) {
        c++;
      }
    }
    if (c === 4) {
      if (this.mentsus[0][0] === this.last_hai) {
        return this.yakus.push(new Yaku("四暗刻単騎", 26));
      } else {
        return this.yakus.push(new Yaku("四暗刻", 13));
      }
    }
  };

  YakuCheck.prototype.dsangen = function() {
    var c, m, _i, _len, _ref;

    c = 0;
    _ref = this.mentsus.slice(1);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (MJ.sangen(m[0])) {
        c += 1;
      }
    }
    if (c > 3) {
      return this.yakus.push(new Yaku("大三元", 13));
    }
  };

  YakuCheck.prototype.tooe = function() {
    var m, _i, _len, _ref;

    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (!MJ.jihai(m[0])) {
        return;
      }
    }
    return this.yakus.push(new Yaku("字一色", 13));
  };

  YakuCheck.prototype.green = function() {
    var p, _i, _len, _ref;

    _ref = this.tehai;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (!MJ.green(p)) {
        return;
      }
    }
    return this.yakus.push(new Yaku("緑一色", 13));
  };

  YakuCheck.prototype.chinroh = function() {
    var p, _i, _len, _ref;

    if (!this.chinroh_flag) {
      return;
    }
    _ref = this.tehai;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (MJ.jihai(p)) {
        return;
      }
    }
    return this.yakus.push(new Yaku("清老頭", 13));
  };

  YakuCheck.prototype.sushi = function() {
    var dcount, m, scount, _i, _len, _ref, _ref1, _ref2;

    dcount = 0;
    scount = 0;
    if ((26 < (_ref = this.mentsus[0][0]) && _ref < 31)) {
      scount++;
    }
    _ref1 = this.mentsus.slice(1, 5);
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      m = _ref1[_i];
      if ((26 < (_ref2 = m[0]) && _ref2 < 31)) {
        dcount++;
      }
    }
    if (dcount > 3) {
      return this.yakus.push(new Yaku("大四喜", 13));
    } else if (dcount + scount > 3) {
      return this.yakus.push(new Yaku("小四喜", 13));
    }
  };

  YakuCheck.prototype.sukan = function() {
    var c, m, _i, _len, _ref;

    c = 0;
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (m.kan) {
        c++;
      }
    }
    if (c === 4) {
      return this.yakus.push(new Yaku("四槓子", 13));
    }
  };

  YakuCheck.prototype.tyuren = function() {};

  YakuCheck.prototype.kokushi = function() {
    if (search_heads(this.tehai).length === 1) {
      if (MJ.count_yaochu(this.tehai) === 14) {
        if (this.pais.uniq().length === 13) {
          return this.yakus.push(new Yaku("国士無双（単騎待ち）", 26));
        } else if (this.tehai.uniq().length === 13) {
          return this.yakus.push(new Yaku("国士無双", 13));
        }
      }
    }
  };

  YakuCheck.prototype.tenho = function() {};

  YakuCheck.prototype.chiho = function() {};

  YakuCheck.prototype.check_yaku = function() {
    if (!this.checked) {
      this.mentsumo();
      this.reach();
      this.tanyao();
      this.pinhu_flag = this.pinhu();
      this.yakuhai();
      this.epei();
      this.ryanpei();
      this.toitoi();
      this.sanan();
      this.suan();
      this.sankan();
      this.sukan();
      this.doujyun();
      this.doukou();
      this.ittu();
      this.honitsu();
      this.chanta();
      this.dsangen();
      this.ssangen();
      this.chinroh();
      this.tooe();
      this.sushi();
      this.green();
      this.tenho();
      this.chiho();
      return this.checked = true;
    }
  };

  return YakuCheck;

})();

Agari = (function(_super) {
  __extends(Agari, _super);

  function Agari(pais, last_hai, mentsus, state) {
    this.pais = pais;
    this.last_hai = last_hai;
    this.tehai = this.pais.slice();
    this.tehai.push(last_hai);
    this.tsumo = state.tsumo();
    this.mentsus = mentsus.slice();
    this.yakus = [];
    this.state = state;
    this.menzen = state.menzen();
    this.yakuman = false;
    this.fu = 20;
    this.pinhu_flag = false;
    this.tiitoi = false;
    this.checked = false;
    this.score = 0;
  }

  Agari.prototype.get_yaku = function() {
    var yakuman;

    if (this.mentsus.length === 1) {
      if (this.kokushi()) {
        this.tenho();
        this.chiho();
      }
    } else {
      if (this.mentsus.length === 7) {
        this.yakus.push(new Yaku("七対子", 2));
        this.tiitoi = true;
      }
      this.check_yaku();
    }
    yakuman = this.yakus.filter(function(y) {
      return y.yakuman();
    });
    if (yakuman.length !== 0) {
      this.yakus = yakuman;
      this.mes = "役満";
      this.yakuman = true;
    }
    return this.yakus;
  };

  Agari.prototype.get_score = function() {
    if (!this.score) {
      this.calc_score();
    }
    return {
      fu: this.fu,
      fan: this.fan,
      score: this.score,
      message: this.mes,
      yakus: this.yakus
    };
  };

  Agari.prototype.calc_score = function() {
    var dora, f, i, j, m, machi, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;

    this.get_yaku();
    dora = 0;
    this.fu = 20;
    _ref = this.state.doras();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      _ref1 = this.tehai;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        j = _ref1[_j];
        if (i === j) {
          dora++;
        }
      }
    }
    if (dora > 0) {
      this.yakus.push(new Yaku("ドラ", dora));
    }
    if (this.tiitoi) {
      this.fu = 25;
    } else {
      if (this.menzen && !this.tsumo) {
        this.fu += 10;
      } else if (!this.menzen && !this.tsumo && this.pinhu_flag) {
        this.fu += 10;
      }
      _ref2 = this.mentsus;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        m = _ref2[_k];
        f = 0;
        if (m.kind === 2) {
          if (m.kind === 2 && !m.kan) {
            if (m.fooroh) {
              f = 2;
            } else {
              f = 4;
            }
          } else if (m.kan) {
            if (m.fooroh) {
              f = 8;
            } else {
              f = 16;
            }
          }
          if (MJ.count_yaochu(m) >= 3) {
            f *= 2;
          }
          this.fu += f;
        }
      }
      if (this.state.yakuhai(this.mentsus[0])) {
        this.fu += 2;
      }
      machi = this.get_machi();
      if (machi[0] || machi[2] || machi[4]) {
        this.fu += 2;
      }
      this.fu = (Math.ceil(this.fu / 10)) * 10;
    }
    this.fan = 0;
    _ref3 = this.yakus;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      y = _ref3[_l];
      this.fan += y.fan;
    }
    this.score = this.fu * (Math.pow(2, this.fan + 2));
    this.score = this.score * 4;
    if (this.score >= 8000) {
      if (this.yakuman) {
        this.mes = "役満";
        return this.score = (this.fan / 13) * 32000;
      } else if (this.fan === 5) {
        this.mes = "満貫";
        return this.score = 8000;
      } else if (this.fan < 8) {
        this.mes = "跳満";
        return this.score = 12000;
      } else if (this.fan < 11) {
        this.mes = "倍満";
        return this.score = 16000;
      } else if (this.fan < 13) {
        this.mes = "三倍満";
        return this.score = 24000;
      } else if (!this.yakuman) {
        this.mes = "数え役満";
        return this.score = 32000;
      }
    } else {
      return this.mes = this.fu + "符" + this.fan + "翻";
    }
  };

  Agari.prototype.get_machi = function() {
    var m, machi, tartsu, _i, _len, _ref, _ref1,
      _this = this;

    machi = [];
    _ref = this.mentsus;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      m = _ref[_i];
      if (_ref1 = this.last_hai, __indexOf.call(m, _ref1) >= 0) {
        if (!m.fooroh && !m.kan) {
          if (m.kind === 0) {
            machi[0] = true;
          } else if (m.kind === 2) {
            machi[1] = true;
          } else if (m.kind === 1) {
            tartsu = m.filter(function(p) {
              return p !== _this.last_hai;
            });
            if (MJ.number(tartsu[0]) + MJ.number(tartsu[1]) === 1 || MJ.number(tartsu[0]) + MJ.number(tartsu[1]) === 15) {
              machi[2] = true;
            } else if (tartsu[0] - tartsu[1] === 1 || tartsu[0] - tartsu[1] === -1) {
              machi[3] = true;
            } else {
              machi[4] = true;
            }
          }
        }
      }
    }
    return machi;
  };

  return Agari;

})(YakuCheck);
